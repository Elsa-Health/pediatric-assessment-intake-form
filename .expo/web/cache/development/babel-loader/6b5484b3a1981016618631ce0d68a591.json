{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Typography/StyledText.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Text from \"./Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar StyledText = function (_React$Component) {\n  _inherits(StyledText, _React$Component);\n\n  function StyledText() {\n    _classCallCheck(this, StyledText);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StyledText).apply(this, arguments));\n  }\n\n  _createClass(StyledText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          alpha = _this$props.alpha,\n          family = _this$props.family,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, [\"theme\", \"alpha\", \"family\", \"style\"]);\n\n      var textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n      var font = theme.fonts[family];\n      var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n      return React.createElement(Text, _extends({}, rest, {\n        style: [_objectSpread({\n          color: textColor\n        }, font, {\n          textAlign: 'left',\n          writingDirection: writingDirection\n        }), style, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        }\n      }));\n    }\n  }]);\n\n  return StyledText;\n}(React.Component);\n\nexport default withTheme(StyledText);","map":{"version":3,"sources":["StyledText.tsx"],"names":["StyledText","React","Component","theme","alpha","family","style","rest","textColor","color","font","writingDirection","I18nManager","textAlign","withTheme"],"mappings":";;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAGA,OAAA,IAAA;AACA,SAAA,SAAA;;AAUMA,IAAAA,U;;;;;;;;;;;6BACK;AAAA,UAAA,WAAA,GAC0C,KAD1C,KAAA;AAAA,UACCG,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,KADR,GAAA,WAAA,CAAA,KAAA;AAAA,UACeC,MADf,GAAA,WAAA,CAAA,MAAA;AAAA,UACuBC,KADvB,GAAA,WAAA,CAAA,KAAA;AAAA,UACiCC,IADjC,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,CAAA,CAAA;;AAEP,UAAMC,SAAS,GAAGC,KAAK,CAACN,KAAK,CAALA,MAAAA,CAANM,IAAK,CAALA,CAAAA,KAAAA,CAAAA,KAAAA,EAAAA,GAAAA,GAAlB,MAAkBA,EAAlB;AAIA,UAAMC,IAAI,GAAGP,KAAK,CAALA,KAAAA,CAAb,MAAaA,CAAb;AACA,UAAMQ,gBAAgB,GAAGC,WAAW,CAAXA,KAAAA,GAAAA,KAAAA,GAAzB,KAAA;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,KAAK,EAAE,CAAA,aAAA,CAAA;AACHH,UAAAA,KAAK,EADF;AAAA,SAAA,EAAA,IAAA,EAAA;AACwBI,UAAAA,SAAS,EADjC,MAAA;AAC2CF,UAAAA,gBAAgB,EAD3D;AAAA,SAAA,CAAA,EAAA,KAAA,EAGL,KAAA,KAAA,CALJ,KAES,CAFT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;;EAVqBV,KAAK,CAACC,S,CAAzBF;;AAuBN,eAAec,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: Theme;\n};\n\nclass StyledText extends React.Component<Props> {\n  render() {\n    const { theme, alpha, family, style, ...rest } = this.props;\n    const textColor = color(theme.colors.text)\n      .alpha(alpha)\n      .rgb()\n      .string();\n    const font = theme.fonts[family];\n    const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n    return (\n      <Text\n        {...rest}\n        style={[\n          { color: textColor, ...font, textAlign: 'left', writingDirection },\n          style,\n          this.props.style,\n        ]}\n      />\n    );\n  }\n}\n\nexport default withTheme(StyledText);\n"]},"metadata":{},"sourceType":"module"}