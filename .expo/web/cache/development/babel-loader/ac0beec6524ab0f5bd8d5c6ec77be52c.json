{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TextInput/TextInputFlat.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, LABEL_PADDING_HORIZONTAL } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder } from \"./helpers\";\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\nvar INPUT_OFFSET = 8;\n\nvar TextInputFlat = function (_React$Component) {\n  _inherits(TextInputFlat, _React$Component);\n\n  function TextInputFlat() {\n    _classCallCheck(this, TextInputFlat);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextInputFlat).apply(this, arguments));\n  }\n\n  _createClass(TextInputFlat, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\"]);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          paddingHorizontal = _ref.paddingHorizontal,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\"]);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var paddingOffset = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number' ? {\n        paddingHorizontal: paddingHorizontal\n      } : StyleSheet.flatten(styles.paddingOffset);\n      var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        underlineColorCustom = 'transparent';\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = colors.placeholder;\n        errorColor = colors.error;\n        underlineColorCustom = underlineColor || colors.disabled;\n      }\n\n      var containerStyle = {\n        backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n        borderTopLeftRadius: theme.roundness,\n        borderTopRightRadius: theme.roundness\n      };\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * paddingOffset.paddingHorizontal;\n      var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n      if (height && typeof height !== 'number') console.warn('Currently we support only numbers in height prop');\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: INPUT_OFFSET,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingFlat = adjustPaddingFlat(_objectSpread({}, paddingSettings, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        paddingOffset: paddingOffset,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        errorColor: errorColor\n      };\n      var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n      return React.createElement(View, {\n        style: [containerStyle, viewStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        }\n      }, React.createElement(Underline, {\n        parentState: parentState,\n        underlineColorCustom: underlineColorCustom,\n        error: error,\n        colors: colors,\n        activeColor: activeColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        }\n      }), React.createElement(View, {\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0,\n          minHeight: minHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        }\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        }\n      }), render == null ? void 0 : render(_objectSpread({}, rest, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, paddingOffset, !multiline || multiline && height ? {\n          height: flatHeight\n        } : {}, paddingFlat, _objectSpread({}, font, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        })]\n      }))));\n    }\n  }]);\n\n  return TextInputFlat;\n}(React.Component);\n\nTextInputFlat.defaultProps = {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      }\n    }));\n  }\n};\nexport default TextInputFlat;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    }\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  paddingOffset: {\n    paddingHorizontal: LABEL_PADDING_HORIZONTAL\n  }\n});","map":{"version":3,"sources":["TextInputFlat.tsx"],"names":["MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","INPUT_OFFSET","TextInputFlat","React","Component","defaultProps","disabled","error","multiline","editable","render","label","selectionColor","underlineColor","dense","style","theme","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","font","hasActiveOutline","fontSizeStyle","fontWeight","height","paddingHorizontal","viewStyle","StyleSheet","fontSize","paddingOffset","styles","inputTextColor","activeColor","color","placeholderColor","underlineColorCustom","errorColor","containerStyle","backgroundColor","borderTopLeftRadius","borderTopRightRadius","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","console","paddingSettings","offset","scale","isAndroid","Platform","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","placeholderStyle","wiggleOffsetX","minHeight","flatHeight","paddingTop","paddingBottom","ref","placeholder","placeholderTextColor","underlineColorAndroid","textAlignVertical","Underline","transform","scaleY","position","left","underline","right","bottom","input","flexGrow","margin","textAlign","zIndex","inputFlat","inputFlatDense"],"mappings":";;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA;AAGA,SAAA,yBAAA,EAAA,yBAAA,EAAA,qBAAA,EAAA,wBAAA;AAOA,SAAA,yBAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,sBAAA;AASA,IAAMA,wBAAwB,GAAG,CAAjC,EAAA;AAEA,IAAMC,iBAAiB,GAAvB,EAAA;AACA,IAAMC,uBAAuB,GAA7B,EAAA;AACA,IAAMC,UAAU,GAAhB,EAAA;AACA,IAAMC,mBAAmB,GAAzB,EAAA;AACA,IAAMC,gBAAgB,GAAtB,EAAA;AAEA,IAAMC,YAAY,GAAlB,CAAA;;AAEMC,IAAAA,a;;;;;;;;;;;6BASK;AAAA,UAAA,WAAA,GAoBH,KApBG,KAAA;AAAA,UAELI,QAFK,GAAA,WAAA,CAAA,QAAA;AAAA,UAGLG,QAHK,GAAA,WAAA,CAAA,QAAA;AAAA,UAILE,KAJK,GAAA,WAAA,CAAA,KAAA;AAAA,UAKLJ,KALK,GAAA,WAAA,CAAA,KAAA;AAAA,UAMLK,cANK,GAAA,WAAA,CAAA,cAAA;AAAA,UAOLC,cAPK,GAAA,WAAA,CAAA,cAAA;AAAA,UAQLC,KARK,GAAA,WAAA,CAAA,KAAA;AAAA,UASLC,KATK,GAAA,WAAA,CAAA,KAAA;AAAA,UAULC,KAVK,GAAA,WAAA,CAAA,KAAA;AAAA,UAWLN,MAXK,GAAA,WAAA,CAAA,MAAA;AAAA,UAYLF,SAZK,GAAA,WAAA,CAAA,SAAA;AAAA,UAaLS,WAbK,GAAA,WAAA,CAAA,WAAA;AAAA,UAcLC,QAdK,GAAA,WAAA,CAAA,QAAA;AAAA,UAeLC,OAfK,GAAA,WAAA,CAAA,OAAA;AAAA,UAgBLC,MAhBK,GAAA,WAAA,CAAA,MAAA;AAAA,UAiBLC,YAjBK,GAAA,WAAA,CAAA,YAAA;AAAA,UAkBLC,oBAlBK,GAAA,WAAA,CAAA,oBAAA;AAAA,UAmBFC,IAnBE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,aAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,cAAA,EAAA,sBAAA,CAAA,CAAA;;AAAA,UAsBCC,MAtBD,GAsBmBR,KAtBnB,CAAA,MAAA;AAAA,UAsBSS,KAtBT,GAsBmBT,KAtBnB,CAAA,KAAA;AAuBP,UAAMU,IAAI,GAAGD,KAAK,CAAlB,OAAA;AACA,UAAME,gBAAgB,GAAGV,WAAW,CAAXA,OAAAA,IAAzB,KAAA;;AAxBO,UAAA,IAAA,GAgCFgB,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAhCE,EAAA;AAAA,UA2BKL,aA3BL,GAAA,IAAA,CAAA,QAAA;AAAA,UA4BLC,UA5BK,GAAA,IAAA,CAAA,UAAA;AAAA,UA6BLC,MA7BK,GAAA,IAAA,CAAA,MAAA;AAAA,UA8BLC,iBA9BK,GAAA,IAAA,CAAA,iBAAA;AAAA,UA+BFC,SA/BE,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,QAAA,EAAA,mBAAA,CAAA,CAAA;;AAiCP,UAAME,QAAQ,GAAGN,aAAa,IAA9B,yBAAA;AACA,UAAMO,aAAa,GAAIJ,iBAAiB,KAAjBA,SAAAA,IACvB,OAAA,iBAAA,KADuBA,QAAAA,GAEnB;AAAEA,QAAAA,iBAAiB,EAFAA;AAEnB,OAFmBA,GAGnBE,UAAU,CAAVA,OAAAA,CAAmBG,MAAM,CAH7B,aAGIH,CAHJ;AAOA,UAAA,cAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,UAAA;;AAMA,UAAA,QAAA,EAAc;AACZI,QAAAA,cAAc,GAAGC,WAAW,GAAGC,KAAK,CAACf,MAAM,CAAZe,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAA/BF,MAA+BE,EAA/BF;AAIAG,QAAAA,gBAAgB,GAAGhB,MAAM,CAAzBgB,QAAAA;AACAC,QAAAA,oBAAoB,GAApBA,aAAAA;AANF,OAAA,MAOO;AACLJ,QAAAA,cAAc,GAAGb,MAAM,CAAvBa,IAAAA;AACAC,QAAAA,WAAW,GAAG/B,KAAK,GAAGiB,MAAM,CAAT,KAAA,GAAkBA,MAAM,CAA3Cc,OAAAA;AACAE,QAAAA,gBAAgB,GAAGhB,MAAM,CAAzBgB,WAAAA;AACAE,QAAAA,UAAU,GAAGlB,MAAM,CAAnBkB,KAAAA;AACAD,QAAAA,oBAAoB,GAAG5B,cAAc,IAAIW,MAAM,CAA/CiB,QAAAA;AAGF;;AAAA,UAAME,cAAc,GAAG;AACrBC,QAAAA,eAAe,EAAE5B,KAAK,CAALA,IAAAA,GACbuB,KAAK,CAACf,MAAM,CAAZe,UAAK,CAALA,CAAAA,OAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADavB,MACbuB,EADavB,GAKbuB,KAAK,CAACf,MAAM,CAAZe,UAAK,CAALA,CAAAA,MAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GANiB,MAMjBA,EANiB;AAUrBM,QAAAA,mBAAmB,EAAE7B,KAAK,CAVL,SAAA;AAWrB8B,QAAAA,oBAAoB,EAAE9B,KAAK,CAX7B;AAAuB,OAAvB;AAcA,UAAM+B,UAAU,GAAGC,yBAAyB,GAA5C,QAAA;AACA,UAAMC,SAAS,GAAGC,yBAAyB,GAA3C,QAAA;AAEA,UAAMC,UAAU,GAAGlC,WAAW,CAAXA,WAAAA,CAAnB,KAAA;AACA,UAAMmC,WAAW,GAAGnC,WAAW,CAAXA,WAAAA,CAApB,MAAA;AACA,UAAMoC,cAAc,GAAGF,UAAU,GAAjC,CAAA;AACA,UAAMG,eAAe,GAAGF,WAAW,GAAnC,CAAA;AAEA,UAAMG,mBAAmB,GACvB,CAACC,WAAW,CAAXA,KAAAA,GAAAA,CAAAA,GAAwB,CAAzB,CAAA,KACGH,cAAc,GAAIN,UAAU,GAAX,UAACA,GADrB,CAAA,IAEA,CAAC,IAAD,UAAA,IAAmBZ,aAAa,CAHlC,iBAAA;AAKA,UAAMsB,cAAc,GAAG3C,KAAK,GACxB,CAACH,KAAK,GAAA,mBAAA,GAAN,gBAAA,IADwB,uBAAA,GAGxBb,UAAU,GAHd,iBAAA;AAKA,UAAM4D,WAAW,GAAGC,oBAAoB,CAAA,WAAA,EAAA,MAAA,EAAxC,cAAwC,CAAxC;AAMA,UAAMC,WAAW,GAAGC,yBAAyB,CAAA,WAAA,EAAA,WAAA,EAG3CrD,SAAS,IAATA,MAAAA,GAAAA,CAAAA,GAA0B,CAAA,MAAA,GAAUiD,cAAc,GAAxB,CAAA,GAH5B,CAA6C,CAA7C;AAMA,UAAI3B,MAAM,IAAI,OAAA,MAAA,KAAd,QAAA,EAEEgC,OAAO,CAAPA,IAAAA,CAAAA,kDAAAA;AAEF,UAAMC,eAAe,GAAG;AACtBjC,QAAAA,MAAM,EAAEA,MAAM,GAAG,CAAH,MAAA,GADQ,IAAA;AAEtBwB,QAAAA,eAAe,EAFO,eAAA;AAGtBU,QAAAA,MAAM,EAHgB,YAAA;AAItBxD,QAAAA,SAAS,EAAEA,SAAS,GAAA,SAAA,GAJE,IAAA;AAKtBM,QAAAA,KAAK,EAAEA,KAAK,GAAA,KAAA,GALU,IAAA;AAMtB8C,QAAAA,WAAW,EANW,WAAA;AAOtB1B,QAAAA,QAAQ,EAPc,QAAA;AAQtBvB,QAAAA,KAAK,EARiB,KAAA;AAStBsD,QAAAA,KAAK,EATiB,SAAA;AAUtBC,QAAAA,SAAS,EAAEC,QAAQ,CAARA,EAAAA,KAVW,SAAA;AAWtB/B,QAAAA,MAAM,EAAEH,UAAU,CAAVA,OAAAA,CACNnB,KAAK,GAAGsB,MAAM,CAAT,cAAA,GAA2BA,MAAM,CAZ1C,SAWUH;AAXc,OAAxB;AAgBA,UAAMmC,GAAG,GAAGC,gBAAgB,CAA5B,eAA4B,CAA5B;AAEA,UAAMC,WAAW,GAAGC,iBAAiB,CAAA,aAAA,CAAA,EAAA,EAAA,eAAA,EAAA;AAEnCH,QAAAA,GAAG,EAFL;AAAqC,OAAA,CAAA,CAArC;AAKA,UAAMI,mBAAmB,GACvB,CAAA,eAAA,IAAoBZ,WAAW,GADjC,wBACE,CADF;AAGA,UAAMa,kBAAkB,GAAG9C,gBAAgB,GACvC+C,sBAAsB,CAACzD,WAAW,CAAZ,OAAA,EADiB,gBACjB,CADiB,GAEvCA,WAAW,CAAXA,WAAAA,CAAAA,QAAAA,GAAAA,CAAAA,GAFJ,CAAA;AAMA,UAAM0D,UAAU,GAAG;AACjBhE,QAAAA,KAAK,EADY,KAAA;AAEjBW,QAAAA,oBAAoB,EAFH,oBAAA;AAGjBmD,QAAAA,kBAAkB,EAHD,kBAAA;AAIjBlE,QAAAA,KAAK,EAJY,KAAA;AAKjBqE,QAAAA,gBAAgB,EAAExC,MAAM,CALP,WAAA;AAMjBoC,QAAAA,mBAAmB,EANF,mBAAA;AAOjBjB,QAAAA,mBAAmB,EAPF,mBAAA;AAQjB7B,QAAAA,IAAI,EARa,IAAA;AASjBQ,QAAAA,QAAQ,EATS,QAAA;AAUjBL,QAAAA,UAAU,EAVO,UAAA;AAWjBkB,QAAAA,UAAU,EAXO,UAAA;AAYjB8B,QAAAA,aAAa,EAZI,qBAAA;AAajBjB,QAAAA,WAAW,EAbM,WAAA;AAcjBzB,QAAAA,aAAa,EAdI,aAAA;AAejBR,QAAAA,gBAAgB,EAfC,gBAAA;AAgBjBW,QAAAA,WAAW,EAhBM,WAAA;AAiBjBE,QAAAA,gBAAgB,EAjBC,gBAAA;AAkBjBE,QAAAA,UAAU,EAlBZ;AAAmB,OAAnB;AAqBA,UAAMoC,SAAS,GACbhD,MAAM,KACLhB,KAAK,GAAIH,KAAK,GAAA,mBAAA,GAAT,gBAAA,GAFR,UACQ,CADR;AAIA,UAAMoE,UAAU,GACdrB,WAAW,IACV,CAAA,MAAA,GAAW5C,KAAK,GAAA,uBAAA,GAAhB,iBAAA,GAFH,CACa,CADb;AAIA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAAA,cAAA,EAAb,SAAa,CAAb;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,QAAA,WAAW,EADb,WAAA;AAEE,QAAA,oBAAoB,EAFtB,oBAAA;AAGE,QAAA,KAAK,EAHP,KAAA;AAIE,QAAA,MAAM,EAJR,MAAA;AAKE,QAAA,WAAW,EALb,WAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CADF,EAQE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,KAAK,EAAE;AACLkE,UAAAA,UAAU,EADL,CAAA;AAELC,UAAAA,aAAa,EAFR,CAAA;AAGLH,UAAAA,SAAS,EAJb;AACS,SADT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAOE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,QAAA,WAAW,EAAvB,WAAA;AAAsC,QAAA,UAAU,EAAhD,UAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAPF;AAOE;AAAA,OAAA,CAPF,EASGpE,MATH,IAAA,IASGA,GATH,KAAA,CASGA,GAAAA,MAAM,CAAA,aAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAELwE,QAAAA,GAAG,EAFE,QAAA;AAGL7D,QAAAA,YAAY,EAHP,YAAA;AAKL8D,QAAAA,WAAW,EAAExE,KAAK,GACdM,WAAW,CADG,WAAA,GAEd,KAAA,KAAA,CAPC,WAAA;AAQLmE,QAAAA,oBAAoB,EARf,gBAAA;AASL3E,QAAAA,QAAQ,EAAE,CAAA,QAAA,IATL,QAAA;AAULG,QAAAA,cAAc,EACZ,OAAA,cAAA,KAAA,WAAA,GAAA,WAAA,GAXG,cAAA;AAcLO,QAAAA,OAAO,EAdF,OAAA;AAeLC,QAAAA,MAAM,EAfD,MAAA;AAgBLiE,QAAAA,qBAAqB,EAhBhB,aAAA;AAiBL7E,QAAAA,SAAS,EAjBJ,SAAA;AAkBLO,QAAAA,KAAK,EAAE,CACLqB,MAAM,CADD,KAAA,EAAA,aAAA,EAGL,CAAA,SAAA,IAAe5B,SAAS,IAAxB,MAAA,GAAsC;AAAEsB,UAAAA,MAAM,EAA9C;AAAsC,SAAtC,GAHK,EAAA,EAAA,WAAA,EAAA,aAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAOHI,UAAAA,QAAQ,EAPL,QAAA;AAQHL,UAAAA,UAAU,EARP,UAAA;AASHU,UAAAA,KAAK,EATF,cAAA;AAUH+C,UAAAA,iBAAiB,EAAE9E,SAAS,GAAA,KAAA,GA9CxC;AAoCe,SAAA,CAAA;AAlBF,OAAA,CAAA,CATT,CARF,CADF;;;;;EApLwBL,KAAK,CAACC,S,CAA5BF;;AAAAA,a,CACGG,YADHH,GACkB;AACpBI,EAAAA,QAAQ,EADY,KAAA;AAEpBC,EAAAA,KAAK,EAFe,KAAA;AAGpBC,EAAAA,SAAS,EAHW,KAAA;AAIpBC,EAAAA,QAAQ,EAJY,IAAA;AAKpBC,EAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,KAAA,EAAA;AAAA,WAAwB,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAxB;AAAwB;AAAA,KAAA,CAAA,CAAxB;AALY;AAAA,CADlBR;AA4ON,eAAA,aAAA;;AAcA,IAAMqF,SAAS,GAATA,SAAAA,SAAAA,CAAY,KAAZA,EAMgB;AALpBtE,MAAAA,WAKoB,GAAA,KAAA,CALpBA,WAAAA;AAAAA,MACAV,KAIoB,GAAA,KAAA,CAJpBA,KADAU;AAAAA,MAEAO,MAGoB,GAAA,KAAA,CAHpBA,MAFAP;AAAAA,MAGAqB,WAEoB,GAAA,KAAA,CAFpBA,WAHArB;AAAAA,MAIAwB,oBACoB,GAAA,KAAA,CADpBA,oBAJAxB;AAMA,MAAI2B,eAAe,GAAG3B,WAAW,CAAXA,OAAAA,GAAAA,WAAAA,GAAtB,oBAAA;AAGA,MAAA,KAAA,EAAW2B,eAAe,GAAGpB,MAAM,CAAxBoB,KAAAA;AACX,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLR,MAAM,CADD,SAAA,EAEL;AACEQ,MAAAA,eAAe,EADjB,eAAA;AAGE4C,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,MAAM,EAAExE,WAAW,CAAXA,OAAAA,GAAAA,CAAAA,GAN5B;AAMkB,OAAD;AAHb,KAFK,CADT;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EADF;AACE;AAAA,GAAA,CADF;AAXF,CAAA;;AAyBA,IAAMmB,MAAM,GAAGH,UAAU,CAAVA,MAAAA,CAAkB;AAC/BkD,EAAAA,WAAW,EAAE;AACXO,IAAAA,QAAQ,EADG,UAAA;AAEXC,IAAAA,IAAI,EAHyB;AAClB,GADkB;AAK/BC,EAAAA,SAAS,EAAE;AACTF,IAAAA,QAAQ,EADC,UAAA;AAETC,IAAAA,IAAI,EAFK,CAAA;AAGTE,IAAAA,KAAK,EAHI,CAAA;AAITC,IAAAA,MAAM,EAJG,CAAA;AAKThE,IAAAA,MAAM,EAVuB;AAKpB,GALoB;AAY/BiE,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,CAAA;AAELC,IAAAA,MAAM,EAFD,CAAA;AAGLC,IAAAA,SAAS,EAAE1C,WAAW,CAAXA,KAAAA,GAAAA,OAAAA,GAHN,MAAA;AAIL2C,IAAAA,MAAM,EAhBuB;AAYxB,GAZwB;AAkB/BC,EAAAA,SAAS,EAAE;AACTpB,IAAAA,UAAU,EADD,EAAA;AAETC,IAAAA,aAAa,EApBgB;AAkBpB,GAlBoB;AAsB/BoB,EAAAA,cAAc,EAAE;AACdrB,IAAAA,UAAU,EADI,EAAA;AAEdC,IAAAA,aAAa,EAxBgB;AAsBf,GAtBe;AA0B/B9C,EAAAA,aAAa,EAAE;AACbJ,IAAAA,iBAAiB,EA3BrB;AA0BiB;AA1BgB,CAAlBE,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  LABEL_PADDING_HORIZONTAL,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n} from './helpers';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst INPUT_OFFSET = 8;\n\nclass TextInputFlat extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n    const paddingOffset = (paddingHorizontal !== undefined &&\n    typeof paddingHorizontal === 'number'\n      ? { paddingHorizontal }\n      : StyleSheet.flatten(styles.paddingOffset)) as {\n      paddingHorizontal: number;\n    };\n\n    let inputTextColor,\n      activeColor,\n      underlineColorCustom,\n      placeholderColor,\n      errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background)\n            .lighten(0.24)\n            .rgb()\n            .string()\n        : color(colors.background)\n            .darken(0.06)\n            .rgb()\n            .string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n        (labelHalfWidth - (labelScale * labelWidth) / 2) +\n      (1 - labelScale) * paddingOffset.paddingHorizontal;\n\n    const minInputHeight = dense\n      ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n        LABEL_PADDING_TOP_DENSE\n      : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n    );\n\n    if (height && typeof height !== 'number')\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputFlatDense : styles.inputFlat\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingFlat = adjustPaddingFlat({\n      ...paddingSettings,\n      pad,\n    });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n    };\n\n    const minHeight =\n      height ||\n      (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n    const flatHeight =\n      inputHeight +\n      (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        <Underline\n          parentState={parentState}\n          underlineColorCustom={underlineColorCustom}\n          error={error}\n          colors={colors}\n          activeColor={activeColor}\n        />\n        <View\n          style={{\n            paddingTop: 0,\n            paddingBottom: 0,\n            minHeight,\n          }}\n        >\n          <InputLabel parentState={parentState} labelProps={labelProps} />\n\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            // @ts-ignore\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              paddingOffset,\n              !multiline || (multiline && height) ? { height: flatHeight } : {},\n              paddingFlat,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n              },\n            ],\n          })}\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  paddingOffset: {\n    paddingHorizontal: LABEL_PADDING_HORIZONTAL,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}