{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Portal/PortalHost.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PortalManager from \"./PortalManager\";\nexport var PortalContext = React.createContext(null);\n\nvar PortalHost = function (_React$Component) {\n  _inherits(PortalHost, _React$Component);\n\n  function PortalHost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PortalHost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PortalHost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.setManager = function (manager) {\n      _this.manager = manager;\n    };\n\n    _this.mount = function (children) {\n      var key = _this.nextKey++;\n\n      if (_this.manager) {\n        _this.manager.mount(key, children);\n      } else {\n        _this.queue.push({\n          type: 'mount',\n          key: key,\n          children: children\n        });\n      }\n\n      return key;\n    };\n\n    _this.update = function (key, children) {\n      if (_this.manager) {\n        _this.manager.update(key, children);\n      } else {\n        var op = {\n          type: 'mount',\n          key: key,\n          children: children\n        };\n\n        var index = _this.queue.findIndex(function (o) {\n          return o.type === 'mount' || o.type === 'update' && o.key === key;\n        });\n\n        if (index > -1) {\n          _this.queue[index] = op;\n        } else {\n          _this.queue.push(op);\n        }\n      }\n    };\n\n    _this.unmount = function (key) {\n      if (_this.manager) {\n        _this.manager.unmount(key);\n      } else {\n        _this.queue.push({\n          type: 'unmount',\n          key: key\n        });\n      }\n    };\n\n    _this.nextKey = 0;\n    _this.queue = [];\n    return _this;\n  }\n\n  _createClass(PortalHost, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var manager = this.manager;\n      var queue = this.queue;\n\n      while (queue.length && manager) {\n        var action = queue.pop();\n\n        if (action) {\n          switch (action.type) {\n            case 'mount':\n              manager.mount(action.key, action.children);\n              break;\n\n            case 'update':\n              manager.update(action.key, action.children);\n              break;\n\n            case 'unmount':\n              manager.unmount(action.key);\n              break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PortalContext.Provider, {\n        value: {\n          mount: this.mount,\n          update: this.update,\n          unmount: this.unmount\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        collapsable: false,\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        }\n      }, this.props.children), React.createElement(PortalManager, {\n        ref: this.setManager,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        }\n      }));\n    }\n  }]);\n\n  return PortalHost;\n}(React.Component);\n\nPortalHost.displayName = 'Portal.Host';\nexport { PortalHost as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["PortalHost.tsx"],"names":["PortalContext","React","PortalHost","Component","displayName","manager","queue","action","setManager","mount","key","type","children","update","op","index","o","unmount","nextKey","styles","StyleSheet","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport PortalManager from './PortalManager';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Operation =\n  | { type: 'mount'; key: number; children: React.ReactNode }\n  | { type: 'update'; key: number; children: React.ReactNode }\n  | { type: 'unmount'; key: number };\n\nexport type PortalMethods = {\n  mount: (children: React.ReactNode) => number;\n  update: (key: number, children: React.ReactNode) => void;\n  unmount: (key: number) => void;\n};\n\nexport const PortalContext = React.createContext<PortalMethods>(null as any);\n\n/**\n * Portal host renders all of its children `Portal` elements.\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\n * If you're using the `Provider` component, it already includes `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Portal.Host>\n *         <Text>Content of the app</Text>\n *       </Portal.Host>\n *     );\n *   }\n * }\n * ```\n *\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\n */\nexport default class PortalHost extends React.Component<Props> {\n  static displayName = 'Portal.Host';\n\n  componentDidMount() {\n    const manager = this.manager;\n    const queue = this.queue;\n\n    while (queue.length && manager) {\n      const action = queue.pop();\n      if (action) {\n        // eslint-disable-next-line default-case\n        switch (action.type) {\n          case 'mount':\n            manager.mount(action.key, action.children);\n            break;\n          case 'update':\n            manager.update(action.key, action.children);\n            break;\n          case 'unmount':\n            manager.unmount(action.key);\n            break;\n        }\n      }\n    }\n  }\n\n  private setManager = (manager: PortalManager | undefined | null) => {\n    this.manager = manager;\n  };\n\n  private mount = (children: React.ReactNode) => {\n    const key = this.nextKey++;\n\n    if (this.manager) {\n      this.manager.mount(key, children);\n    } else {\n      this.queue.push({ type: 'mount', key, children });\n    }\n\n    return key;\n  };\n\n  private update = (key: number, children: React.ReactNode) => {\n    if (this.manager) {\n      this.manager.update(key, children);\n    } else {\n      const op = { type: 'mount', key, children };\n      const index = this.queue.findIndex(\n        o => o.type === 'mount' || (o.type === 'update' && o.key === key)\n      );\n\n      if (index > -1) {\n        // @ts-ignore\n        this.queue[index] = op;\n      } else {\n        this.queue.push(op as Operation);\n      }\n    }\n  };\n\n  private unmount = (key: number) => {\n    if (this.manager) {\n      this.manager.unmount(key);\n    } else {\n      this.queue.push({ type: 'unmount', key });\n    }\n  };\n\n  private nextKey = 0;\n  private queue: Operation[] = [];\n  private manager: PortalManager | null | undefined;\n\n  render() {\n    return (\n      <PortalContext.Provider\n        value={{\n          mount: this.mount,\n          update: this.update,\n          unmount: this.unmount,\n        }}\n      >\n        {/* Need collapsable=false here to clip the elevations, otherwise they appear above Portal components */}\n        <View\n          style={styles.container}\n          collapsable={false}\n          pointerEvents=\"box-none\"\n        >\n          {this.props.children}\n        </View>\n        <PortalManager ref={this.setManager} />\n      </PortalContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}