{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Snackbar.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"./Button\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport { withTheme } from \"../core/theming\";\nvar DURATION_SHORT = 4000;\nvar DURATION_MEDIUM = 7000;\nvar DURATION_LONG = 10000;\n\nvar Snackbar = function (_React$Component) {\n  _inherits(Snackbar, _React$Component);\n\n  function Snackbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Snackbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Snackbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      opacity: new Animated.Value(0.0),\n      hidden: !_this.props.visible\n    };\n\n    _this.toggle = function () {\n      if (_this.props.visible) {\n        _this.show();\n      } else {\n        _this.hide();\n      }\n    };\n\n    _this.show = function () {\n      if (_this.hideTimeout) {\n        clearTimeout(_this.hideTimeout);\n      }\n\n      _this.setState({\n        hidden: false\n      });\n\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.opacity, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start(function (_ref) {\n        var finished = _ref.finished;\n\n        if (finished) {\n          var duration = _this.props.duration;\n          var isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;\n\n          if (finished && !isInfinity) {\n            _this.hideTimeout = setTimeout(_this.props.onDismiss, duration);\n          }\n        }\n      });\n    };\n\n    _this.hide = function () {\n      if (_this.hideTimeout) {\n        clearTimeout(_this.hideTimeout);\n      }\n\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.opacity, {\n        toValue: 0,\n        duration: 100 * scale,\n        useNativeDriver: true\n      }).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          _this.setState({\n            hidden: true\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Snackbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.visible) {\n        this.show();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        this.toggle();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.hideTimeout) {\n        clearTimeout(this.hideTimeout);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          visible = _this$props.visible,\n          action = _this$props.action,\n          onDismiss = _this$props.onDismiss,\n          theme = _this$props.theme,\n          style = _this$props.style;\n      var colors = theme.colors,\n          roundness = theme.roundness;\n\n      if (this.state.hidden) {\n        return null;\n      }\n\n      return React.createElement(SafeAreaView, {\n        pointerEvents: \"box-none\",\n        style: styles.wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        }\n      }, React.createElement(Surface, {\n        pointerEvents: \"box-none\",\n        accessibilityLiveRegion: \"polite\",\n        style: [styles.container, {\n          borderRadius: roundness,\n          opacity: this.state.opacity,\n          transform: [{\n            scale: visible ? this.state.opacity.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0.9, 1]\n            }) : 1\n          }]\n        }, {\n          backgroundColor: colors.onSurface\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        }\n      }, React.createElement(Text, {\n        style: [styles.content, {\n          marginRight: action ? 0 : 16,\n          color: colors.surface\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        }\n      }, children), action ? React.createElement(Button, {\n        accessibilityLabel: action.accessibilityLabel,\n        onPress: function onPress() {\n          action.onPress();\n          onDismiss();\n        },\n        style: styles.button,\n        color: colors.accent,\n        compact: true,\n        mode: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        }\n      }, action.label) : null));\n    }\n  }]);\n\n  return Snackbar;\n}(React.Component);\n\nSnackbar.DURATION_SHORT = DURATION_SHORT;\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\nSnackbar.DURATION_LONG = DURATION_LONG;\nSnackbar.defaultProps = {\n  duration: DURATION_MEDIUM\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%'\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6\n  }\n});\nexport default withTheme(Snackbar);","map":{"version":3,"sources":["Snackbar.tsx"],"names":["DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","React","Component","defaultProps","duration","state","opacity","Animated","hidden","prevProps","clearTimeout","toggle","show","scale","toValue","useNativeDriver","finished","isInfinity","Number","setTimeout","hide","children","visible","action","onDismiss","theme","style","colors","roundness","styles","borderRadius","transform","inputRange","outputRange","backgroundColor","marginRight","color","StyleSheet","wrapper","position","bottom","width","container","elevation","flexDirection","justifyContent","alignItems","margin","content","marginLeft","marginVertical","flexWrap","flex","button","marginHorizontal","withTheme"],"mappings":";;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AASA,OAAA,MAAA;AACA,OAAA,OAAA;AACA,OAAA,IAAA;AACA,SAAA,SAAA;AA0CA,IAAMA,cAAc,GAApB,IAAA;AACA,IAAMC,eAAe,GAArB,IAAA;AACA,IAAMC,aAAa,GAAnB,KAAA;;AAsDMC,IAAAA,Q;;;;;;;;;;;;;;;UAoBJK,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,IAAIC,QAAQ,CAAZ,KAAA,CADH,GACG,CADH;AAENC,MAAAA,MAAM,EAAE,CAAC,KAAA,CAAA,KAAA,CAFH;AAAA,K;;UAuBAG,M,GAAS,YAAM;AACrB,UAAI,KAAA,CAAA,KAAA,CAAJ,OAAA,EAAwB;AACtB,QAAA,KAAA,CAAA,IAAA;AADF,OAAA,MAEO;AACL,QAAA,KAAA,CAAA,IAAA;AAEH;;;UAEOC,I,GAAO,YAAM;AACnB,UAAI,KAAA,CAAJ,WAAA,EAAsB;AACpBF,QAAAA,YAAY,CAAC,KAAA,CAAbA,WAAY,CAAZA;AAEF;;AAAA,MAAA,KAAA,CAAA,QAAA,CAAc;AACZF,QAAAA,MAAM,EADR;AAAc,OAAd;;AAJmB,UAOXK,KAPW,GAOD,KAAA,CAAA,KAAA,CAAA,KAAA,CAPC,SAOD,CAPC,KAAA;AAQnBN,MAAAA,QAAQ,CAARA,MAAAA,CAAgB,KAAA,CAAA,KAAA,CAAhBA,OAAAA,EAAoC;AAClCO,QAAAA,OAAO,EAD2B,CAAA;AAElCV,QAAAA,QAAQ,EAAE,MAFwB,KAAA;AAGlCW,QAAAA,eAAe,EAHjBR;AAAoC,OAApCA,EAAAA,KAAAA,CAIS,UAAA,IAAA,EAAkB;AAAfS,YAAAA,QAAe,GAAA,IAAA,CAAfA,QAAAA;;AACV,YAAA,QAAA,EAAc;AAAA,cACJZ,QADI,GACS,KAAA,CADT,KACS,CADT,QAAA;AAEZ,cAAMa,UAAU,GACdb,QAAQ,KAAKc,MAAM,CAAnBd,iBAAAA,IACAA,QAAQ,KAAKc,MAAM,CAFrB,iBAAA;;AAIA,cAAIF,QAAQ,IAAI,CAAhB,UAAA,EAA6B;AAC3B,YAAA,KAAA,CAAA,WAAA,GAAmBG,UAAU,CAAC,KAAA,CAAA,KAAA,CAAD,SAAA,EAA7B,QAA6B,CAA7B;AAEH;AACF;AAfDZ,OAAAA;;;UAkBMa,I,GAAO,YAAM;AACnB,UAAI,KAAA,CAAJ,WAAA,EAAsB;AACpBV,QAAAA,YAAY,CAAC,KAAA,CAAbA,WAAY,CAAZA;AAFiB;;AAAA,UAIXG,KAJW,GAID,KAAA,CAAA,KAAA,CAAA,KAAA,CAJC,SAID,CAJC,KAAA;AAKnBN,MAAAA,QAAQ,CAARA,MAAAA,CAAgB,KAAA,CAAA,KAAA,CAAhBA,OAAAA,EAAoC;AAClCO,QAAAA,OAAO,EAD2B,CAAA;AAElCV,QAAAA,QAAQ,EAAE,MAFwB,KAAA;AAGlCW,QAAAA,eAAe,EAHjBR;AAAoC,OAApCA,EAAAA,KAAAA,CAIS,UAAA,KAAA,EAAkB;AAAfS,YAAAA,QAAe,GAAA,KAAA,CAAfA,QAAAA;;AACV,YAAA,QAAA,EAAc;AACZ,UAAA,KAAA,CAAA,QAAA,CAAc;AAAER,YAAAA,MAAM,EAAtB;AAAc,WAAd;AAEH;AARDD,OAAAA;;;;;;;;wCAzDkB;AAClB,UAAI,KAAA,KAAA,CAAJ,OAAA,EAAwB;AACtB,aAAA,IAAA;AAEH;;;;uCAEkBE,S,EAAkB;AACnC,UAAIA,SAAS,CAATA,OAAAA,KAAsB,KAAA,KAAA,CAA1B,OAAA,EAA8C;AAC5C,aAAA,MAAA;AAEH;;;;2CAEsB;AACrB,UAAI,KAAJ,WAAA,EAAsB;AACpBC,QAAAA,YAAY,CAAC,KAAbA,WAAY,CAAZA;AAEH;;;;6BAsDQ;AAAA,UAAA,WAAA,GACwD,KADxD,KAAA;AAAA,UACCW,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWC,OADX,GAAA,WAAA,CAAA,OAAA;AAAA,UACoBC,MADpB,GAAA,WAAA,CAAA,MAAA;AAAA,UAC4BC,SAD5B,GAAA,WAAA,CAAA,SAAA;AAAA,UACuCC,KADvC,GAAA,WAAA,CAAA,KAAA;AAAA,UAC8CC,KAD9C,GAAA,WAAA,CAAA,KAAA;AAAA,UAECC,MAFD,GAEuBF,KAFvB,CAAA,MAAA;AAAA,UAESG,SAFT,GAEuBH,KAFvB,CAAA,SAAA;;AAIP,UAAI,KAAA,KAAA,CAAJ,MAAA,EAAuB;AACrB,eAAA,IAAA;AAGF;;AAAA,aACE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AAAc,QAAA,aAAa,EAA3B,UAAA;AAAuC,QAAA,KAAK,EAAEI,MAAM,CAApD,OAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,QAAA,aAAa,EADf,UAAA;AAEE,QAAA,uBAAuB,EAFzB,QAAA;AAGE,QAAA,KAAK,EACH,CACEA,MAAM,CADR,SAAA,EAEE;AACEC,UAAAA,YAAY,EADd,SAAA;AAEExB,UAAAA,OAAO,EAAE,KAAA,KAAA,CAFX,OAAA;AAGEyB,UAAAA,SAAS,EAAE,CACT;AACElB,YAAAA,KAAK,EAAES,OAAO,GACV,KAAA,KAAA,CAAA,OAAA,CAAA,WAAA,CAA+B;AAC7BU,cAAAA,UAAU,EAAE,CAAA,CAAA,EADiB,CACjB,CADiB;AAE7BC,cAAAA,WAAW,EAAE,CAAA,GAAA,EAHL,CAGK;AAFgB,aAA/B,CADU,GAPtB;AAMM,WADS;AAHb,SAFF,EAgBE;AAAEC,UAAAA,eAAe,EAAEP,MAAM,CAhB3B;AAgBE,SAhBF,EAJJ,KAII,CAJJ;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAyBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,KAAK,EAAE,CACLE,MAAM,CADD,OAAA,EAEL;AAAEM,UAAAA,WAAW,EAAEZ,MAAM,GAAA,CAAA,GAArB,EAAA;AAAgCa,UAAAA,KAAK,EAAET,MAAM,CAHjD;AAGI,SAFK,CADT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAzBF,QAyBE,CAzBF,EAiCGJ,MAAM,GACL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,QAAA,kBAAkB,EAAEA,MAAM,CAD5B,kBAAA;AAEE,QAAA,OAAO,EAAE,SAAA,OAAA,GAAM;AACbA,UAAAA,MAAM,CAANA,OAAAA;AACAC,UAAAA,SAAS;AAJb,SAAA;AAME,QAAA,KAAK,EAAEK,MAAM,CANf,MAAA;AAOE,QAAA,KAAK,EAAEF,MAAM,CAPf,MAAA;AAQE,QAAA,OAAO,EART,IAAA;AASE,QAAA,IAAI,EATN,MAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAWGJ,MAAM,CAZJ,KACL,CADK,GAnCb,IAEI,CADF,CADF;;;;;EAvGmBtB,KAAK,CAACC,S,CAAvBF;;AAAAA,Q,CAIGH,cAJHG,GAIoBH,cAJpBG;AAAAA,Q,CASGF,eATHE,GASqBF,eATrBE;AAAAA,Q,CAcGD,aAdHC,GAcmBD,aAdnBC;AAAAA,Q,CAgBGG,YAhBHH,GAgBkB;AACpBI,EAAAA,QAAQ,EADY;AAAA,CAhBlBJ;AA+JN,IAAM6B,MAAM,GAAGQ,UAAU,CAAVA,MAAAA,CAAkB;AAC/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EADD,UAAA;AAEPC,IAAAA,MAAM,EAFC,CAAA;AAGPC,IAAAA,KAAK,EAJwB;AACtB,GADsB;AAM/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EADA,CAAA;AAETC,IAAAA,aAAa,EAFJ,KAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,UAAU,EAJD,QAAA;AAKTC,IAAAA,MAAM,EALG,CAAA;AAMTjB,IAAAA,YAAY,EAZiB;AAMpB,GANoB;AAc/BkB,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EADH,EAAA;AAEPC,IAAAA,cAAc,EAFP,EAAA;AAGPC,IAAAA,QAAQ,EAHD,MAAA;AAIPC,IAAAA,IAAI,EAlByB;AActB,GAdsB;AAoB/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,gBAAgB,EADV,CAAA;AAENJ,IAAAA,cAAc,EAtBlB;AAoBU;AApBuB,CAAlBb,CAAf;AA0BA,eAAekB,SAAS,CAAxB,QAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  SafeAreaView,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n} from 'react-native';\n\nimport Button from './Button';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Whether the Snackbar is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Label and press callback for the action button. It should contain the following properties:\n   * - `label` - Label of the action button\n   * - `onPress` - Callback that is called when action button is pressed.\n   */\n  action?: {\n    label: string;\n    accessibilityLabel?: string;\n    onPress: () => void;\n  };\n  /**\n   * The duration for which the Snackbar is shown.\n   */\n  duration?: number;\n  /**\n   * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Text content of the Snackbar.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  hidden: boolean;\n};\n\nconst DURATION_SHORT = 4000;\nconst DURATION_MEDIUM = 7000;\nconst DURATION_LONG = 10000;\n\n/**\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\n * Snackbar by default use onSurface color from theme\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, StyleSheet } from 'react-native';\n * import { Button, Snackbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   render() {\n *     const { visible } = this.state;\n *     return (\n *       <View style={styles.container}>\n *         <Button\n *           onPress={() => this.setState(state => ({ visible: !state.visible }))}\n *         >\n *           {this.state.visible ? 'Hide' : 'Show'}\n *         </Button>\n *         <Snackbar\n *           visible={this.state.visible}\n *           onDismiss={() => this.setState({ visible: false })}\n *           action={{\n *             label: 'Undo',\n *             onPress: () => {\n *               // Do something\n *             },\n *           }}\n *         >\n *           Hey there! I'm a Snackbar.\n *         </Snackbar>\n *       </View>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'space-between',\n *   },\n * });\n * ```\n */\nclass Snackbar extends React.Component<Props, State> {\n  /**\n   * Show the Snackbar for a short duration.\n   */\n  static DURATION_SHORT = DURATION_SHORT;\n\n  /**\n   * Show the Snackbar for a medium duration.\n   */\n  static DURATION_MEDIUM = DURATION_MEDIUM;\n\n  /**\n   * Show the Snackbar for a long duration.\n   */\n  static DURATION_LONG = DURATION_LONG;\n\n  static defaultProps = {\n    duration: DURATION_MEDIUM,\n  };\n\n  state = {\n    opacity: new Animated.Value(0.0),\n    hidden: !this.props.visible,\n  };\n\n  componentDidMount() {\n    if (this.props.visible) {\n      this.show();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      this.toggle();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n  }\n\n  private toggle = () => {\n    if (this.props.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  private show = () => {\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n    this.setState({\n      hidden: false,\n    });\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.opacity, {\n      toValue: 1,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        const { duration } = this.props;\n        const isInfinity =\n          duration === Number.POSITIVE_INFINITY ||\n          duration === Number.NEGATIVE_INFINITY;\n\n        if (finished && !isInfinity) {\n          this.hideTimeout = setTimeout(this.props.onDismiss, duration);\n        }\n      }\n    });\n  };\n\n  private hide = () => {\n    if (this.hideTimeout) {\n      clearTimeout(this.hideTimeout);\n    }\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.opacity, {\n      toValue: 0,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.setState({ hidden: true });\n      }\n    });\n  };\n\n  private hideTimeout?: number;\n\n  render() {\n    const { children, visible, action, onDismiss, theme, style } = this.props;\n    const { colors, roundness } = theme;\n\n    if (this.state.hidden) {\n      return null;\n    }\n\n    return (\n      <SafeAreaView pointerEvents=\"box-none\" style={styles.wrapper}>\n        <Surface\n          pointerEvents=\"box-none\"\n          accessibilityLiveRegion=\"polite\"\n          style={\n            [\n              styles.container,\n              {\n                borderRadius: roundness,\n                opacity: this.state.opacity,\n                transform: [\n                  {\n                    scale: visible\n                      ? this.state.opacity.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0.9, 1],\n                        })\n                      : 1,\n                  },\n                ],\n              },\n              { backgroundColor: colors.onSurface },\n              style,\n            ] as StyleProp<ViewStyle>\n          }\n        >\n          <Text\n            style={[\n              styles.content,\n              { marginRight: action ? 0 : 16, color: colors.surface },\n            ]}\n          >\n            {children}\n          </Text>\n          {action ? (\n            <Button\n              accessibilityLabel={action.accessibilityLabel}\n              onPress={() => {\n                action.onPress();\n                onDismiss();\n              }}\n              style={styles.button}\n              color={colors.accent}\n              compact\n              mode=\"text\"\n            >\n              {action.label}\n            </Button>\n          ) : null}\n        </Surface>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4,\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1,\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6,\n  },\n});\n\nexport default withTheme(Snackbar);\n"]},"metadata":{},"sourceType":"module"}