{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ghms3c/Desktop/Projects/pediatric-assessment-intake-form/components/BasicSymptomInput.tsx\";\n\nimport React, { useState } from 'react';\nimport { Col, SimpleQuestion, FitTextToCell, Input } from '.';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { styles } from \"../style\";\nexport var BasicSymptomInput = function BasicSymptomInput(_ref) {\n  var label = _ref.label,\n      onChange = _ref.onChange,\n      times = _ref.times;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      _setChecked = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      days = _useState4[0],\n      setDays = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      timesDay = _useState6[0],\n      setTimesDay = _useState6[1];\n\n  React.useEffect(function () {\n    if (days !== '' && checked !== '') onChange({\n      checked: checked,\n      days: days,\n      timesDay: timesDay\n    });\n  }, [checked, timesDay, days]);\n  return React.createElement(React.Fragment, null, React.createElement(Col, {\n    style: styles.headerLightGray,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, label)), React.createElement(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, React.createElement(SimpleQuestion, {\n    options: ['yes', 'no'],\n    checked: checked,\n    setChecked: function setChecked(text) {\n      _setChecked(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  })), React.createElement(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, React.createElement(FitTextToCell, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, times && React.createElement(React.Fragment, null, React.createElement(Input, {\n    label: \"# TImes / Day\",\n    placeholder: \"# TImes / Day\",\n    text: timesDay,\n    setText: function setText(text) {\n      setTimesDay(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }), React.createElement(Spacer, {\n    size: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  })), React.createElement(Input, {\n    label: \"Days\",\n    placeholder: \"Days\",\n    text: days,\n    setText: function setText(text) {\n      setDays(text);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/home/ghms3c/Desktop/Projects/pediatric-assessment-intake-form/components/BasicSymptomInput.tsx"],"names":["React","useState","Col","SimpleQuestion","FitTextToCell","Input","styles","BasicSymptomInput","label","onChange","times","checked","setChecked","days","setDays","timesDay","setTimesDay","useEffect","headerLightGray","text"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAAQC,GAAR,EAAYC,cAAZ,EAA2BC,aAA3B,EAAyCC,KAAzC,QAAqD,GAArD;;AAGA,SAAQC,MAAR;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAgC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACjCT,QAAQ,CAAC,EAAD,CADyB;AAAA;AAAA,MACxDU,OADwD;AAAA,MAC/CC,WAD+C;;AAAA,mBAKvCX,QAAQ,CAAC,EAAD,CAL+B;AAAA;AAAA,MAKxDY,IALwD;AAAA,MAKlDC,OALkD;;AAAA,mBAM/Bb,QAAQ,CAAC,EAAD,CANuB;AAAA;AAAA,MAMxDc,QANwD;AAAA,MAM9CC,WAN8C;;AAO/DhB,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpB,QAAIJ,IAAI,KAAK,EAAT,IAAeF,OAAO,KAAK,EAA/B,EAAmCF,QAAQ,CAAC;AAAEE,MAAAA,OAAO,EAAPA,OAAF;AAAWE,MAAAA,IAAI,EAAJA,IAAX;AAAiBE,MAAAA,QAAQ,EAARA;AAAjB,KAAD,CAAR;AACpC,GAFD,EAEG,CAACJ,OAAD,EAAUI,QAAV,EAAoBF,IAApB,CAFH;AAIA,SACE,0CACE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAEP,MAAM,CAACY,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOV,KAAP,CADF,CADF,EAKE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,IAAR,CADX;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,UAAU,EAAE,oBAACQ,IAAD,EAAU;AACpBP,MAAAA,WAAU,CAACO,IAAD,CAAV;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,EAcE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,IACJ,0CACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,eADR;AAEE,IAAA,WAAW,EAAC,eAFd;AAGE,IAAA,IAAI,EAAEK,QAHR;AAIE,IAAA,OAAO,EAAE,iBAACI,IAAD,EAAU;AACjBH,MAAAA,WAAW,CAACG,IAAD,CAAX;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CAFJ,EAcE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,WAAW,EAAC,MAFd;AAGE,IAAA,IAAI,EAAEN,IAHR;AAIE,IAAA,OAAO,EAAE,iBAACM,IAAD,EAAU;AACjBL,MAAAA,OAAO,CAACK,IAAD,CAAP;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF,CAdF,CADF;AA0CD,CArDM","sourcesContent":["import React,{useState} from 'react'\nimport {Col,SimpleQuestion,FitTextToCell,Input} from '.'\n\nimport {Text} from 'react-native'\nimport {styles} from '../style'\n\nexport const BasicSymptomInput = ({ label, onChange, times }) => {\n  const [checked, setChecked] = useState('');\n\n  //TODO : to manage input text outside the component\n\n  const [days, setDays] = useState('');\n  const [timesDay, setTimesDay] = useState('');\n  React.useEffect(() => {\n    if (days !== '' && checked !== '') onChange({ checked, days, timesDay });\n  }, [checked, timesDay, days]);\n\n  return (\n    <>\n      <Col style={styles.headerLightGray}>\n        <Text>{label}</Text>\n      </Col>\n\n      <Col>\n        <SimpleQuestion\n          options={['yes', 'no']}\n          checked={checked}\n          setChecked={(text) => {\n            setChecked(text);\n          }}\n        />\n      </Col>\n      <Col>\n        <FitTextToCell>\n          {times && (\n            <>\n              <Input\n                label=\"# TImes / Day\"\n                placeholder=\"# TImes / Day\"\n                text={timesDay}\n                setText={(text) => {\n                  setTimesDay(text);\n                }}\n              />\n              <Spacer size={8} />\n            </>\n          )}\n          <Input\n            label=\"Days\"\n            placeholder=\"Days\"\n            text={days}\n            setText={(text) => {\n              setDays(text);\n            }}\n          />\n        </FitTextToCell>\n      </Col>\n    </>\n  );\n};"]},"metadata":{},"sourceType":"module"}