{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/DataTable/DataTableCell.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple\";\n\nvar DataTableCell = function (_React$Component) {\n  _inherits(DataTableCell, _React$Component);\n\n  function DataTableCell() {\n    _classCallCheck(this, DataTableCell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DataTableCell).apply(this, arguments));\n  }\n\n  _createClass(DataTableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          style = _this$props.style,\n          numeric = _this$props.numeric,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"style\", \"numeric\"]);\n\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        style: [styles.container, numeric && styles.right, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        }\n      }), React.createElement(Text, {\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        }\n      }, children));\n    }\n  }]);\n\n  return DataTableCell;\n}(React.Component);\n\nDataTableCell.displayName = 'DataTable.Cell';\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  right: {\n    justifyContent: 'flex-end'\n  }\n});\nexport default DataTableCell;","map":{"version":3,"sources":["DataTableCell.tsx"],"names":["DataTableCell","React","Component","displayName","children","style","numeric","rest","styles","StyleSheet","container","flex","flexDirection","alignItems","right","justifyContent"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,OAAA,IAAA;AACA,OAAA,eAAA;;AAmBMA,IAAAA,a;;;;;;;;;;;6BAGK;AAAA,UAAA,WAAA,GACuC,KADvC,KAAA;AAAA,UACCI,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWC,KADX,GAAA,WAAA,CAAA,KAAA;AAAA,UACkBC,OADlB,GAAA,WAAA,CAAA,OAAA;AAAA,UAC8BC,IAD9B,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,CAAA,CAAA;;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EAAmBF,OAAO,IAAIE,MAAM,CAApC,KAAA,EAFT,KAES,CAFT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,CAAA,EAIE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,aAAa,EAAnB,CAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EALJ,QAKI,CAJF,CADF;;;;;EANwBP,KAAK,CAACC,S,CAA5BF;;AAAAA,a,CACGG,WADHH,GACiB,gBADjBA;AAiBN,IAAMQ,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,aAAa,EAFJ,KAAA;AAGTC,IAAAA,UAAU,EAJmB;AACpB,GADoB;AAO/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,cAAc,EARlB;AAOS;AAPwB,CAAlBN,CAAf;AAYA,eAAA,aAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple';\nimport { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\nclass DataTableCell extends React.Component<Props> {\n  static displayName = 'DataTable.Cell';\n\n  render() {\n    const { children, style, numeric, ...rest } = this.props;\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, numeric && styles.right, style]}\n      >\n        <Text numberOfLines={1}>{children}</Text>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n"]},"metadata":{},"sourceType":"module"}