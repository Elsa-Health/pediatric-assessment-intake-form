{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Appbar/Appbar.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport AppbarHeader from \"./AppbarHeader\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\nimport overlay from \"../../styles/overlay\";\nexport var DEFAULT_APPBAR_HEIGHT = 56;\n\nvar Appbar = function (_React$Component) {\n  _inherits(Appbar, _React$Component);\n\n  function Appbar() {\n    _classCallCheck(this, Appbar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Appbar).apply(this, arguments));\n  }\n\n  _createClass(Appbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          dark = _this$props.dark,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"children\", \"dark\", \"style\", \"theme\"]);\n\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          customBackground = _ref.backgroundColor,\n          _ref$elevation = _ref.elevation,\n          elevation = _ref$elevation === void 0 ? 4 : _ref$elevation,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\", \"elevation\"]);\n\n      var isDark;\n      var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n      }\n\n      var shouldCenterContent = false;\n      var shouldAddLeftSpacing = false;\n      var shouldAddRightSpacing = false;\n\n      if (Platform.OS === 'ios') {\n        var hasAppbarContent = false;\n        var leftItemsCount = 0;\n        var rightItemsCount = 0;\n        React.Children.forEach(children, function (child) {\n          if (React.isValidElement(child)) {\n            if (child.type === AppbarContent) {\n              hasAppbarContent = true;\n            } else if (hasAppbarContent) {\n              rightItemsCount++;\n            } else {\n              leftItemsCount++;\n            }\n          }\n        });\n        shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n        shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n        shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n      }\n\n      return React.createElement(Surface, _extends({\n        style: [{\n          backgroundColor: backgroundColor\n        }, styles.appbar, {\n          elevation: elevation\n        }, restStyle]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }), shouldAddLeftSpacing ? React.createElement(View, {\n        style: styles.spacing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        }\n      }) : null, React.Children.toArray(children).filter(function (child) {\n        return child != null && typeof child !== 'boolean';\n      }).map(function (child, i) {\n        if (!React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction].includes(child.type)) {\n          return child;\n        }\n\n        var props = {\n          color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? white : black\n        };\n\n        if (child.type === AppbarContent) {\n          props.style = [i !== 0 && {\n            marginLeft: 8\n          }, shouldCenterContent && {\n            alignItems: 'center'\n          }, child.props.style];\n        }\n\n        return React.cloneElement(child, props);\n      }), shouldAddRightSpacing ? React.createElement(View, {\n        style: styles.spacing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        }\n      }) : null);\n    }\n  }]);\n\n  return Appbar;\n}(React.Component);\n\nAppbar.Content = AppbarContent;\nAppbar.Action = AppbarAction;\nAppbar.BackAction = AppbarBackAction;\nAppbar.Header = AppbarHeader;\nvar styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nexport default withTheme(Appbar);","map":{"version":3,"sources":["Appbar.tsx"],"names":["DEFAULT_APPBAR_HEIGHT","Appbar","React","Component","Content","AppbarContent","Action","AppbarAction","BackAction","AppbarBackAction","Header","AppbarHeader","children","dark","style","theme","rest","colors","isDarkTheme","mode","customBackground","elevation","restStyle","StyleSheet","backgroundColor","overlay","isDark","color","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","hasAppbarContent","leftItemsCount","rightItemsCount","child","styles","props","i","marginLeft","alignItems","appbar","height","flexDirection","paddingHorizontal","spacing","width","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  AppbarContent as _AppbarContent,\n} from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport AppbarHeader, { AppbarHeader as _AppbarHeader } from './AppbarHeader';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\nimport overlay from '../../styles/overlay';\n\ntype Props = Partial<React.ComponentProps<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Appbar style={styles.bottom}>\n *         <Appbar.Action icon=\"archive\" onPress={() => console.log('Pressed archive')} />\n *         <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *         <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *         <Appbar.Action icon=\"delete\" onPress={() => console.log('Pressed delete')} />\n *       </Appbar>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nclass Appbar extends React.Component<Props> {\n  // @component ./AppbarContent.tsx\n  static Content = AppbarContent;\n  // @component ./AppbarAction.tsx\n  static Action = AppbarAction;\n  // @component ./AppbarBackAction.tsx\n  static BackAction = AppbarBackAction;\n  // @component ./AppbarHeader.tsx\n  static Header = AppbarHeader;\n\n  render() {\n    const { children, dark, style, theme, ...rest } = this.props;\n\n    const { colors, dark: isDarkTheme, mode } = theme;\n    const {\n      backgroundColor: customBackground,\n      elevation = 4,\n      ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n\n    let isDark: boolean;\n\n    const backgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    let shouldCenterContent = false;\n    let shouldAddLeftSpacing = false;\n    let shouldAddRightSpacing = false;\n    if (Platform.OS === 'ios') {\n      let hasAppbarContent = false;\n      let leftItemsCount = 0;\n      let rightItemsCount = 0;\n\n      React.Children.forEach(children, child => {\n        if (React.isValidElement(child)) {\n          if (child.type === AppbarContent) {\n            hasAppbarContent = true;\n          } else if (hasAppbarContent) {\n            rightItemsCount++;\n          } else {\n            leftItemsCount++;\n          }\n        }\n      });\n\n      shouldCenterContent =\n        hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n      shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n      shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n    }\n    return (\n      <Surface\n        //@ts-ignore\n        style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n        {...rest}\n      >\n        {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n        {React.Children.toArray(children)\n          .filter(child => child != null && typeof child !== 'boolean')\n          .map((child, i) => {\n            if (\n              !React.isValidElement(child) ||\n              ![\n                AppbarContent,\n                AppbarAction,\n                AppbarBackAction,\n                // @ts-ignore\n              ].includes(child.type)\n            ) {\n              return child;\n            }\n\n            const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n              color:\n                typeof child.props.color !== 'undefined'\n                  ? child.props.color\n                  : isDark\n                  ? white\n                  : black,\n            };\n\n            if (child.type === AppbarContent) {\n              props.style = [\n                // Since content is not first item, add extra left margin\n                i !== 0 && { marginLeft: 8 },\n                shouldCenterContent && { alignItems: 'center' },\n                child.props.style,\n              ];\n            }\n            return React.cloneElement(child, props);\n          })}\n        {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n"]},"metadata":{},"sourceType":"module"}