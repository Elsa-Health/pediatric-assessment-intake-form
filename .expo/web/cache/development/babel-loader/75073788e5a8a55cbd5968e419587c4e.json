{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TextInput/TextInput.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInputOutlined from \"./TextInputOutlined\";\nimport TextInputFlat from \"./TextInputFlat\";\nimport { withTheme } from \"../../core/theming\";\nvar BLUR_ANIMATION_DURATION = 180;\nvar FOCUS_ANIMATION_DURATION = 150;\n\nvar TextInput = function (_React$Component) {\n  _inherits(TextInput, _React$Component);\n\n  function TextInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextInput);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextInput)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n    _this.state = {\n      labeled: new Animated.Value((_this.props.value !== undefined ? _this.props.value : _this.props.defaultValue) ? 0 : 1),\n      error: new Animated.Value(_this.props.error ? 1 : 0),\n      focused: false,\n      placeholder: '',\n      value: _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue,\n      labelLayout: {\n        measured: false,\n        width: 0,\n        height: 0\n      }\n    };\n\n    _this.showPlaceholder = function () {\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n      }\n\n      _this.timer = setTimeout(function () {\n        return _this.setState({\n          placeholder: _this.props.placeholder\n        });\n      }, 50);\n    };\n\n    _this.hidePlaceholder = function () {\n      return _this.setState({\n        placeholder: ''\n      });\n    };\n\n    _this.showError = function () {\n      Animated.timing(_this.state.error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start(_this.showPlaceholder);\n    };\n\n    _this.hideError = function () {\n      Animated.timing(_this.state.error, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    };\n\n    _this.restoreLabel = function () {\n      return Animated.timing(_this.state.labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    };\n\n    _this.minimizeLabel = function () {\n      return Animated.timing(_this.state.labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION,\n        useNativeDriver: Platform.select({\n          ios: false,\n          default: true\n        })\n      }).start();\n    };\n\n    _this.handleFocus = function (args) {\n      if (_this.props.disabled || !_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(args);\n      }\n    };\n\n    _this.handleBlur = function (args) {\n      if (_this.props.disabled || !_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        focused: false\n      });\n\n      if (_this.props.onBlur) {\n        _this.props.onBlur(args);\n      }\n    };\n\n    _this.handleChangeText = function (value) {\n      if (!_this.props.editable) {\n        return;\n      }\n\n      _this.setState({\n        value: value\n      });\n\n      _this.props.onChangeText && _this.props.onChangeText(value);\n    };\n\n    _this.handleLayoutAnimatedText = function (e) {\n      _this.setState({\n        labelLayout: {\n          width: e.nativeEvent.layout.width,\n          height: e.nativeEvent.layout.height,\n          measured: true\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.focused !== this.state.focused || prevState.value !== this.state.value || prevState.labelLayout !== this.state.labelLayout) {\n        if (this.state.value || this.state.focused) {\n          this.minimizeLabel();\n        } else {\n          this.restoreLabel();\n        }\n      }\n\n      if (prevState.focused !== this.state.focused || prevProps.label !== this.props.label) {\n        if (this.state.focused || !this.props.label) {\n          this.showPlaceholder();\n        } else {\n          this.hidePlaceholder();\n        }\n      }\n\n      if (prevProps.error !== this.props.error) {\n        if (this.props.error) {\n          this.showError();\n        } else {\n          this.hideError();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.root && this.root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.root && this.root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this.root && this.root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this.root && this.root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _ref = this.props,\n          mode = _ref.mode,\n          rest = _objectWithoutProperties(_ref, [\"mode\"]);\n\n      return mode === 'outlined' ? React.createElement(TextInputOutlined, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        }\n      })) : React.createElement(TextInputFlat, _extends({}, rest, {\n        value: this.state.value,\n        parentState: this.state,\n        innerRef: function innerRef(ref) {\n          _this2.root = ref;\n        },\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChangeText: this.handleChangeText,\n        onLayoutAnimatedText: this.handleLayoutAnimatedText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        }\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return {\n        value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value\n      };\n    }\n  }]);\n\n  return TextInput;\n}(React.Component);\n\nTextInput.defaultProps = {\n  mode: 'flat',\n  dense: false,\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      }\n    }));\n  }\n};\nexport default withTheme(TextInput);","map":{"version":3,"sources":["TextInput.tsx"],"names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","React","Component","defaultProps","mode","dense","disabled","error","multiline","editable","render","nextProps","prevState","value","state","labeled","Animated","focused","placeholder","labelLayout","measured","width","height","prevProps","clearTimeout","showPlaceholder","setTimeout","hidePlaceholder","showError","toValue","duration","useNativeDriver","Platform","ios","default","hideError","restoreLabel","minimizeLabel","handleFocus","handleBlur","handleChangeText","handleLayoutAnimatedText","e","args","rest","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport { withTheme } from '../../core/theming';\nimport { RenderProps, State } from './types';\nimport { Theme, $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: any;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <TextInput\n *         label='Email'\n *         value={this.state.text}\n *         onChangeText={text => this.setState({ text })}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n\n  state = {\n    labeled: new Animated.Value(\n      (this.props.value !== undefined\n      ? this.props.value\n      : this.props.defaultValue)\n        ? 0\n        : 1\n    ),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value:\n      this.props.value !== undefined\n        ? this.props.value\n        : this.props.defaultValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    if (\n      prevState.focused !== this.state.focused ||\n      prevState.value !== this.state.value ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      prevState.labelLayout !== this.state.labelLayout\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (\n      prevState.focused !== this.state.focused ||\n      prevProps.label !== this.props.label\n    ) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (prevProps.error !== this.props.error) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    // @ts-ignore\n    this.timer = setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    );\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: number;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start(this.showPlaceholder);\n  };\n\n  private hideError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  private minimizeLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}