{"ast":null,"code":"export var calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\nexport var calculateInputHeight = function calculateInputHeight(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var minHeight = arguments.length > 2 ? arguments[2] : undefined;\n  var finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\nexport var calculatePadding = function calculatePadding(props) {\n  var height = props.height,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline;\n  var result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nvar calculateTextAreaPadding = function calculateTextAreaPadding(props) {\n  var dense = props.dense;\n  return dense ? 10 : 20;\n};\n\nvar calculateInputPadding = function calculateInputPadding(_ref) {\n  var topPosition = _ref.topPosition,\n      fontSize = _ref.fontSize,\n      multiline = _ref.multiline,\n      scale = _ref.scale,\n      dense = _ref.dense,\n      offset = _ref.offset,\n      isAndroid = _ref.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\n\nexport var adjustPaddingOut = function adjustPaddingOut(_ref2) {\n  var pad = _ref2.pad,\n      multiline = _ref2.multiline,\n      label = _ref2.label,\n      scale = _ref2.scale,\n      height = _ref2.height,\n      fontSize = _ref2.fontSize,\n      dense = _ref2.dense,\n      offset = _ref2.offset,\n      isAndroid = _ref2.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = pad;\n\n  if (height) {\n    return {\n      paddingTop: Math.max(0, (height - fontSize) / 2),\n      paddingBottom: Math.max(0, (height - fontSize) / 2)\n    };\n  }\n\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontSize / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontSize * scale) : Math.min(offset / 2, refFontSize * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : 0;\n      }\n    }\n\n    result = Math.floor(result);\n  }\n\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\nexport var adjustPaddingFlat = function adjustPaddingFlat(_ref3) {\n  var pad = _ref3.pad,\n      scale = _ref3.scale,\n      multiline = _ref3.multiline,\n      label = _ref3.label,\n      height = _ref3.height,\n      offset = _ref3.offset,\n      dense = _ref3.dense,\n      fontSize = _ref3.fontSize,\n      isAndroid = _ref3.isAndroid,\n      styles = _ref3.styles;\n  var result = pad;\n  var topResult = result;\n  var bottomResult = result;\n  var paddingTop = styles.paddingTop,\n      paddingBottom = styles.paddingBottom;\n  var refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    if (label) {\n      return {\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom\n      };\n    }\n\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n\n  if (label) {\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    }\n\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\nexport var interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {\n  return labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1]\n  });\n};","map":{"version":3,"sources":["helpers.tsx"],"names":["calculateLabelTopPosition","height","optionalPadding","customHeight","Math","calculateInputHeight","minHeight","finalHeight","calculatePadding","multiline","props","result","calculateTextAreaPadding","calculateInputPadding","dense","topPosition","fontSize","scale","offset","isAndroid","refFontSize","adjustPaddingOut","pad","label","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","interpolatePlaceholder","labeled","inputRange","outputRange","hasActiveOutline"],"mappings":"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","sourcesContent":["import { Animated } from 'react-native';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  label?: string | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const refFontSize = scale * fontSize;\n  let result = pad;\n\n  if (height) {\n    return {\n      paddingTop: Math.max(0, (height - fontSize) / 2),\n      paddingBottom: Math.max(0, (height - fontSize) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontSize / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontSize * scale)\n            : Math.min(offset / 2, refFontSize * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n"]},"metadata":{},"sourceType":"module"}