{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Searchbar.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport IconButton from \"./IconButton\";\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\n\nvar Searchbar = function (_React$Component) {\n  _inherits(Searchbar, _React$Component);\n\n  function Searchbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Searchbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Searchbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClearPress = function () {\n      _this.clear();\n\n      _this.props.onChangeText && _this.props.onChangeText('');\n    };\n\n    return _this;\n  }\n\n  _createClass(Searchbar, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.root && this.root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.root && this.root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this.root && this.root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this.root && this.root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          onIconPress = _this$props.onIconPress,\n          icon = _this$props.icon,\n          value = _this$props.value,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          customIconColor = _this$props.iconColor,\n          clearIcon = _this$props.clearIcon,\n          inputStyle = _this$props.inputStyle,\n          rest = _objectWithoutProperties(_this$props, [\"placeholder\", \"onIconPress\", \"icon\", \"value\", \"theme\", \"style\", \"iconColor\", \"clearIcon\", \"inputStyle\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness,\n          dark = theme.dark,\n          fonts = theme.fonts;\n      var textColor = colors.text;\n      var font = fonts.regular;\n      var iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      return React.createElement(Surface, {\n        style: [{\n          borderRadius: roundness,\n          elevation: 4\n        }, styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        }\n      }, React.createElement(IconButton, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onIconPress,\n        color: iconColor,\n        icon: icon || function (_ref) {\n          var size = _ref.size,\n              color = _ref.color;\n          return React.createElement(MaterialCommunityIcon, {\n            name: \"magnify\",\n            color: color,\n            size: size,\n            direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        }\n      }), React.createElement(TextInput, _extends({\n        style: [styles.input, _objectSpread({\n          color: textColor\n        }, font), inputStyle],\n        placeholder: placeholder || '',\n        placeholderTextColor: colors.placeholder,\n        selectionColor: colors.primary,\n        underlineColorAndroid: \"transparent\",\n        returnKeyType: \"search\",\n        keyboardAppearance: dark ? 'dark' : 'light',\n        accessibilityTraits: \"search\",\n        accessibilityRole: \"search\",\n        ref: function ref(c) {\n          _this2.root = c;\n        },\n        value: value\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        }\n      })), React.createElement(IconButton, {\n        borderless: true,\n        disabled: !value,\n        color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n        rippleColor: rippleColor,\n        onPress: this.handleClearPress,\n        icon: clearIcon || function (_ref2) {\n          var size = _ref2.size,\n              color = _ref2.color;\n          return React.createElement(MaterialCommunityIcon, {\n            name: \"close\",\n            color: color,\n            size: size,\n            direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            }\n          });\n        },\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        }\n      }));\n    }\n  }]);\n\n  return Searchbar;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","React","Component","handleClearPress","args","placeholder","onIconPress","icon","value","theme","style","customIconColor","clearIcon","inputStyle","rest","colors","roundness","dark","fonts","textColor","font","iconColor","color","rippleColor","borderRadius","elevation","styles","size","I18nManager","StyleSheet","container","flexDirection","alignItems","input","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\nimport { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     firstQuery: '',\n *   };\n *\n *   render() {\n *     const { firstQuery } = this.state;\n *     return (\n *       <Searchbar\n *         placeholder=\"Search\"\n *         onChangeText={query => { this.setState({ firstQuery: query }); }}\n *         value={firstQuery}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Searchbar extends React.Component<Props> {\n  private handleClearPress = () => {\n    this.clear();\n    this.props.onChangeText && this.props.onChangeText('');\n  };\n\n  private root: TextInput | undefined | null;\n\n  /**\n   * @internal\n   */ setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const {\n      placeholder,\n      onIconPress,\n      icon,\n      value,\n      theme,\n      style,\n      iconColor: customIconColor,\n      clearIcon,\n      inputStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark\n        ? textColor\n        : color(textColor)\n            .alpha(0.54)\n            .rgb()\n            .string());\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={c => {\n            this.root = c;\n          }}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={this.handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}