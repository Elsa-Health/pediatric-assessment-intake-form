{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/List/ListAccordion.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { ListAccordionGroupContext } from \"./ListAccordionGroup\";\n\nvar ListAccordion = function (_React$Component) {\n  _inherits(ListAccordion, _React$Component);\n\n  function ListAccordion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ListAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ListAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      expanded: _this.props.expanded || false\n    };\n\n    _this.handlePress = function () {\n      _this.props.onPress && _this.props.onPress();\n\n      if (_this.props.expanded === undefined) {\n        _this.setState(function (state) {\n          return {\n            expanded: !state.expanded\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ListAccordion, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          left = _this$props.left,\n          title = _this$props.title,\n          description = _this$props.description,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          titleStyle = _this$props.titleStyle,\n          descriptionStyle = _this$props.descriptionStyle,\n          titleNumberOfLines = _this$props.titleNumberOfLines,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines,\n          style = _this$props.style,\n          id = _this$props.id;\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      var expandedInternal = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;\n      return React.createElement(ListAccordionGroupContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        }\n      }, function (groupContext) {\n        if (groupContext !== null && !id) {\n          throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n        }\n\n        var expanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n        var handlePress = groupContext && id !== undefined ? function () {\n          return groupContext.onAccordionPress(id);\n        } : _this2.handlePress;\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          }\n        }, React.createElement(TouchableRipple, {\n          style: [styles.container, style],\n          onPress: handlePress,\n          accessibilityTraits: \"button\",\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          }\n        }, React.createElement(View, {\n          style: styles.row,\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          }\n        }, left ? left({\n          color: expanded ? theme.colors.primary : descriptionColor\n        }) : null, React.createElement(View, {\n          style: [styles.item, styles.content],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          }\n        }, React.createElement(Text, {\n          numberOfLines: titleNumberOfLines,\n          style: [styles.title, {\n            color: expanded ? theme.colors.primary : titleColor\n          }, titleStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          }\n        }, title), description && React.createElement(Text, {\n          numberOfLines: descriptionNumberOfLines,\n          style: [styles.description, {\n            color: descriptionColor\n          }, descriptionStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          }\n        }, description)), React.createElement(View, {\n          style: [styles.item, description ? styles.multiline : undefined],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          }\n        }, React.createElement(MaterialCommunityIcon, {\n          name: expanded ? 'chevron-up' : 'chevron-down',\n          color: titleColor,\n          size: 24,\n          direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          }\n        })))), expanded ? React.Children.map(children, function (child) {\n          if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n            return React.cloneElement(child, {\n              style: [styles.child, child.props.style]\n            });\n          }\n\n          return child;\n        }) : null);\n      });\n    }\n  }]);\n\n  return ListAccordion;\n}(React.Component);\n\nListAccordion.displayName = 'List.Accordion';\nListAccordion.defaultProps = {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","React","Component","displayName","defaultProps","titleNumberOfLines","descriptionNumberOfLines","state","expanded","handlePress","left","title","description","children","theme","titleStyle","descriptionStyle","style","id","titleColor","color","descriptionColor","expandedInternal","groupContext","styles","I18nManager","child","StyleSheet","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","fontSize","item","margin","paddingLeft","content","flex","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\nimport {\n  ListAccordionGroupContext,\n  ListAccordionGroupContextType,\n} from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Checkbox } from 'react-native-paper';\n *\n * class MyComponent extends React.Component {\n *   state = {\n *     expanded: true\n *   }\n *\n *   _handlePress = () =>\n *     this.setState({\n *       expanded: !this.state.expanded\n *     });\n *\n *   render() {\n *     return (\n *       <List.Section title=\"Accordions\">\n *         <List.Accordion\n *           title=\"Uncontrolled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *\n *         <List.Accordion\n *           title=\"Controlled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *           expanded={this.state.expanded}\n *           onPress={this._handlePress}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *       </List.Section>\n *     );\n *   }\n * }\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  private handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      titleNumberOfLines,\n      descriptionNumberOfLines,\n      style,\n      id,\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expandedInternal =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <ListAccordionGroupContext.Consumer>\n        {(groupContext: ListAccordionGroupContextType) => {\n          if (groupContext !== null && !id) {\n            throw new Error(\n              'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n            );\n          }\n          const expanded = groupContext\n            ? groupContext.expandedId === id\n            : expandedInternal;\n          const handlePress =\n            groupContext && id !== undefined\n              ? () => groupContext.onAccordionPress(id)\n              : this.handlePress;\n          return (\n            <View>\n              <TouchableRipple\n                style={[styles.container, style]}\n                onPress={handlePress}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n              >\n                <View style={styles.row} pointerEvents=\"none\">\n                  {left\n                    ? left({\n                        color: expanded\n                          ? theme.colors.primary\n                          : descriptionColor,\n                      })\n                    : null}\n                  <View style={[styles.item, styles.content]}>\n                    <Text\n                      numberOfLines={titleNumberOfLines}\n                      style={[\n                        styles.title,\n                        {\n                          color: expanded ? theme.colors.primary : titleColor,\n                        },\n                        titleStyle,\n                      ]}\n                    >\n                      {title}\n                    </Text>\n                    {description && (\n                      <Text\n                        numberOfLines={descriptionNumberOfLines}\n                        style={[\n                          styles.description,\n                          {\n                            color: descriptionColor,\n                          },\n                          descriptionStyle,\n                        ]}\n                      >\n                        {description}\n                      </Text>\n                    )}\n                  </View>\n                  <View\n                    style={[\n                      styles.item,\n                      description ? styles.multiline : undefined,\n                    ]}\n                  >\n                    <MaterialCommunityIcon\n                      name={expanded ? 'chevron-up' : 'chevron-down'}\n                      color={titleColor}\n                      size={24}\n                      direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                    />\n                  </View>\n                </View>\n              </TouchableRipple>\n              {expanded\n                ? React.Children.map(children, child => {\n                    if (\n                      left &&\n                      React.isValidElement(child) &&\n                      !child.props.left &&\n                      !child.props.right\n                    ) {\n                      return React.cloneElement(child, {\n                        style: [styles.child, child.props.style],\n                      });\n                    }\n\n                    return child;\n                  })\n                : null}\n            </View>\n          );\n        }}\n      </ListAccordionGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}