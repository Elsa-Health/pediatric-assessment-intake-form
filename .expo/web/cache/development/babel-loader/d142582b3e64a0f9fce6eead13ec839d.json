{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Button.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\n\nvar Button = function (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  function Button() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      elevation: new Animated.Value(_this.props.mode === 'contained' ? 2 : 0)\n    };\n\n    _this.handlePressIn = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 8,\n          duration: 200\n        }).start();\n      }\n    };\n\n    _this.handlePressOut = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 2,\n          duration: 150\n        }).start();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          compact = _this$props.compact,\n          mode = _this$props.mode,\n          dark = _this$props.dark,\n          loading = _this$props.loading,\n          icon = _this$props.icon,\n          buttonColor = _this$props.color,\n          children = _this$props.children,\n          uppercase = _this$props.uppercase,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          contentStyle = _this$props.contentStyle,\n          labelStyle = _this$props.labelStyle,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"onPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var font = theme.fonts.medium;\n      var backgroundColor, borderColor, textColor, borderWidth;\n\n      if (mode === 'contained') {\n        if (disabled) {\n          backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n        } else if (buttonColor) {\n          backgroundColor = buttonColor;\n        } else {\n          backgroundColor = colors.primary;\n        }\n      } else {\n        backgroundColor = 'transparent';\n      }\n\n      if (mode === 'outlined') {\n        borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n        borderWidth = StyleSheet.hairlineWidth;\n      } else {\n        borderColor = 'transparent';\n        borderWidth = 0;\n      }\n\n      if (disabled) {\n        textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      } else if (mode === 'contained') {\n        var isDark;\n\n        if (typeof dark === 'boolean') {\n          isDark = dark;\n        } else {\n          isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n        }\n\n        textColor = isDark ? white : black;\n      } else if (buttonColor) {\n        textColor = buttonColor;\n      } else {\n        textColor = colors.primary;\n      }\n\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      var buttonStyle = {\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        borderWidth: borderWidth,\n        borderRadius: roundness\n      };\n      var touchableStyle = {\n        borderRadius: style ? StyleSheet.flatten(style).borderRadius || roundness : roundness\n      };\n\n      var textStyle = _objectSpread({\n        color: textColor\n      }, font);\n\n      var elevation = disabled || mode !== 'contained' ? 0 : this.state.elevation;\n      return React.createElement(Surface, _extends({}, rest, {\n        style: [styles.button, compact && styles.compact, {\n          elevation: elevation\n        }, buttonStyle, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        onPress: onPress,\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        disabled: disabled,\n        rippleColor: rippleColor,\n        style: touchableStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        }\n      }, React.createElement(View, {\n        style: [styles.content, contentStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        }\n      }, icon && loading !== true ? React.createElement(View, {\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        }\n      }, React.createElement(Icon, {\n        source: icon,\n        size: 16,\n        color: textColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        }\n      })) : null, loading ? React.createElement(ActivityIndicator, {\n        size: 16,\n        color: textColor,\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        }\n      }) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        }\n      }, children))));\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nButton.defaultProps = {\n  mode: 'text',\n  uppercase: true\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"sources":["Button.tsx"],"names":["Button","React","Component","defaultProps","mode","uppercase","state","elevation","Animated","handlePressIn","toValue","duration","handlePressOut","disabled","compact","dark","loading","icon","buttonColor","children","accessibilityLabel","onPress","style","theme","contentStyle","labelStyle","rest","colors","roundness","font","backgroundColor","color","borderColor","borderWidth","StyleSheet","textColor","isDark","rippleColor","buttonStyle","borderRadius","touchableStyle","textStyle","styles","button","minWidth","borderStyle","content","flexDirection","alignItems","justifyContent","width","marginLeft","marginRight","label","textAlign","letterSpacing","marginVertical","marginHorizontal","compactLabel","uppercaseLabel","textTransform","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Button extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'text',\n    uppercase: true,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\n  };\n\n  private handlePressIn = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 8,\n        duration: 200,\n      }).start();\n    }\n  };\n\n  private handlePressOut = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 2,\n        duration: 150,\n      }).start();\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      compact,\n      mode,\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase,\n      accessibilityLabel,\n      onPress,\n      style,\n      theme,\n      contentStyle,\n      labelStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const font = theme.fonts.medium;\n\n    let backgroundColor, borderColor, textColor, borderWidth;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).isLight();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = {\n      borderRadius: style\n        ? StyleSheet.flatten(style).borderRadius || roundness\n        : roundness,\n    };\n    const textStyle = { color: textColor, ...font };\n    const elevation =\n      disabled || mode !== 'contained' ? 0 : this.state.elevation;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation } as ViewStyle,\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : []}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={16} color={textColor} />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size={16}\n                color={textColor}\n                style={styles.icon}\n              />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n                font,\n                labelStyle,\n              ]}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}