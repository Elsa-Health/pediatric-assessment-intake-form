{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Appbar/AppbarAction.tsx\";\nimport * as React from 'react';\nimport color from 'color';\nimport { black } from \"../../styles/colors\";\nimport IconButton from \"../IconButton\";\n\nvar AppbarAction = function (_React$Component) {\n  _inherits(AppbarAction, _React$Component);\n\n  function AppbarAction() {\n    _classCallCheck(this, AppbarAction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AppbarAction).apply(this, arguments));\n  }\n\n  _createClass(AppbarAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$color = _this$props.color,\n          iconColor = _this$props$color === void 0 ? color(black).alpha(0.54).rgb().string() : _this$props$color,\n          icon = _this$props.icon,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          rest = _objectWithoutProperties(_this$props, [\"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\"]);\n\n      return React.createElement(IconButton, _extends({\n        onPress: onPress,\n        color: iconColor,\n        icon: icon,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        animated: true\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        }\n      }));\n    }\n  }]);\n\n  return AppbarAction;\n}(React.Component);\n\nAppbarAction.displayName = 'Appbar.Action';\nAppbarAction.defaultProps = {\n  size: 24\n};\nexport { AppbarAction as default };","map":{"version":3,"sources":["AppbarAction.tsx"],"names":["AppbarAction","React","Component","displayName","defaultProps","size","iconColor","color","icon","disabled","onPress","accessibilityLabel","rest"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,KAAA,MAAA,OAAA;AAEA,SAAA,KAAA;AACA,OAAA,UAAA;;AAkCqBA,IAAAA,Y;;;;;;;;;;;6BAOV;AAAA,UAAA,WAAA,GAWH,KAXG,KAAA;AAAA,UAAA,iBAAA,GAAA,WAAA,CAAA,KAAA;AAAA,UAEEM,SAFF,GAAA,iBAAA,KAAA,KAAA,CAAA,GAEcC,KAAK,CAALA,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAFd,MAEcA,EAFd,GAAA,iBAAA;AAAA,UAMLC,IANK,GAAA,WAAA,CAAA,IAAA;AAAA,UAOLC,QAPK,GAAA,WAAA,CAAA,QAAA;AAAA,UAQLC,OARK,GAAA,WAAA,CAAA,OAAA;AAAA,UASLC,kBATK,GAAA,WAAA,CAAA,kBAAA;AAAA,UAUFC,IAVE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAAA,SAAA,EAAA,oBAAA,CAAA,CAAA;;AAaP,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;AACE,QAAA,OAAO,EADT,OAAA;AAEE,QAAA,KAAK,EAFP,SAAA;AAGE,QAAA,IAAI,EAHN,IAAA;AAIE,QAAA,QAAQ,EAJV,QAAA;AAKE,QAAA,kBAAkB,EALpB,kBAAA;AAME,QAAA,QAAQ,EANV;AAAA,OAAA,EAAA,IAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;;EApBsCX,KAAK,CAACC,S,CAA3BF;;AAAAA,Y,CACZG,WADYH,GACE,eADFA;AAAAA,Y,CAGZI,YAHYJ,GAGG;AACpBK,EAAAA,IAAI,EADgB;AAAA,CAHHL;SAAAA,Y","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { black } from '../../styles/colors';\nimport IconButton from '../IconButton';\nimport { IconSource } from '../Icon';\n\ntype Props = React.ComponentProps<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n */\nexport default class AppbarAction extends React.Component<Props> {\n  static displayName = 'Appbar.Action';\n\n  static defaultProps = {\n    size: 24,\n  };\n\n  render() {\n    const {\n      color: iconColor = color(black)\n        .alpha(0.54)\n        .rgb()\n        .string(),\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n\n    return (\n      <IconButton\n        onPress={onPress}\n        color={iconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        {...rest}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}