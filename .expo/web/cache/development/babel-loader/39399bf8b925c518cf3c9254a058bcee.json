{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ToggleButton/ToggleButton.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport color from 'color';\nimport IconButton from \"../IconButton\";\nimport ToggleButtonGroup, { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport ToggleButtonRow from \"./ToggleButtonRow\";\nimport { black, white } from \"../../styles/colors\";\n\nvar ToggleButton = function (_React$Component) {\n  _inherits(ToggleButton, _React$Component);\n\n  function ToggleButton() {\n    _classCallCheck(this, ToggleButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ToggleButton).apply(this, arguments));\n  }\n\n  _createClass(ToggleButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          theme = _this$props.theme,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          disabled = _this$props.disabled,\n          style = _this$props.style,\n          value = _this$props.value,\n          status = _this$props.status,\n          _onPress = _this$props.onPress,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"]);\n\n      var borderRadius = theme.roundness;\n      return React.createElement(ToggleButtonGroupContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }, function (context) {\n        var backgroundColor;\n        var checked = context && context.value === value || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return React.createElement(IconButton, _extends({\n          borderless: false,\n          icon: icon,\n          onPress: function onPress(e) {\n            if (_onPress) {\n              _onPress(e);\n            }\n\n            if (context) {\n              context.onValueChange(!checked ? value : null);\n            }\n          },\n          size: size,\n          accessibilityLabel: accessibilityLabel,\n          disabled: disabled,\n          style: [styles.content, {\n            backgroundColor: backgroundColor,\n            borderRadius: borderRadius,\n            borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n          }, style]\n        }, rest, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          }\n        }));\n      });\n    }\n  }]);\n\n  return ToggleButton;\n}(React.Component);\n\nToggleButton.Group = ToggleButtonGroup;\nToggleButton.Row = ToggleButtonRow;\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton);","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","React","Component","Group","ToggleButtonGroup","Row","ToggleButtonRow","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","checked","context","backgroundColor","styles","borderColor","color","StyleSheet","content","width","height","margin","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport { IconSource } from '../Icon';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * class ToggleButtonExample extends React.Component {\n *   state = {\n *     status: 'checked',\n *   };\n *\n *   render() {\n *     return (\n *       <ToggleButton\n *         icon=\"bluetooth\"\n *         value=\"bluetooth\"\n *         status={this.state.status}\n *         onPress={value =>\n *           this.setState({\n *             status: value === 'checked' ? 'unchecked' : 'checked',\n *           })\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.tsx\n  static Group = ToggleButtonGroup;\n\n  // @component ./ToggleButtonRow.tsx\n  static Row = ToggleButtonRow;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: { value: string; onValueChange: Function } | null) => {\n          let backgroundColor;\n\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]},"metadata":{},"sourceType":"module"}