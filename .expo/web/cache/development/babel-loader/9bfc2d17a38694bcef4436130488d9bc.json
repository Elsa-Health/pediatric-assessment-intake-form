{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Divider.tsx\";\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\n\nvar Divider = function (_React$Component) {\n  _inherits(Divider, _React$Component);\n\n  function Divider() {\n    _classCallCheck(this, Divider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Divider).apply(this, arguments));\n  }\n\n  _createClass(Divider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          inset = _this$props.inset,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"inset\", \"style\", \"theme\"]);\n\n      var isDarkTheme = theme.dark;\n      return React.createElement(View, _extends({}, rest, {\n        style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        }\n      }));\n    }\n  }]);\n\n  return Divider;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\nexport default withTheme(Divider);","map":{"version":3,"sources":["Divider.tsx"],"names":["Divider","React","Component","inset","style","theme","rest","isDarkTheme","styles","StyleSheet","light","backgroundColor","color","height","dark","marginLeft","withTheme"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,KAAA,MAAA,OAAA;;;AAEA,SAAA,SAAA;AACA,SAAA,KAAA,EAAA,KAAA;;AAoCMA,IAAAA,O;;;;;;;;;;;6BACK;AAAA,UAAA,WAAA,GACkC,KADlC,KAAA;AAAA,UACCG,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,KADR,GAAA,WAAA,CAAA,KAAA;AAAA,UACeC,KADf,GAAA,WAAA,CAAA,KAAA;AAAA,UACyBC,IADzB,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAAA,UAEOC,WAFP,GAEuBF,KAFvB,CAAA,IAAA;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,KAAK,EAAE,CACLE,WAAW,GAAGC,MAAM,CAAT,IAAA,GAAiBA,MAAM,CAD7B,KAAA,EAELL,KAAK,IAAIK,MAAM,CAFV,KAAA,EAFT,KAES,CAFT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;;EAJkBP,KAAK,CAACC,S,CAAtBF;;AAiBN,IAAMQ,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;AAC/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,eAAe,EAAEC,KAAK,CAALA,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADZ,MACYA,EADZ;AAKLC,IAAAA,MAAM,EAAEJ,UAAU,CANW;AACxB,GADwB;AAQ/BK,EAAAA,IAAI,EAAE;AACJH,IAAAA,eAAe,EAAEC,KAAK,CAALA,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADb,MACaA,EADb;AAKJC,IAAAA,MAAM,EAAEJ,UAAU,CAbW;AAQzB,GARyB;AAe/BN,EAAAA,KAAK,EAAE;AACLY,IAAAA,UAAU,EAhBd;AAeS;AAfwB,CAAlBN,CAAf;AAoBA,eAAeO,SAAS,CAAxB,OAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Divider extends React.Component<Props> {\n  render() {\n    const { inset, style, theme, ...rest } = this.props;\n    const { dark: isDarkTheme } = theme;\n    return (\n      <View\n        {...rest}\n        style={[\n          isDarkTheme ? styles.dark : styles.light,\n          inset && styles.inset,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"module"}