{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Switch.tsx\";\nimport * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from \"../styles/colors\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nvar version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  function Switch() {\n    _classCallCheck(this, Switch);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Switch).apply(this, arguments));\n  }\n\n  _createClass(Switch, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          onValueChange = _this$props.onValueChange,\n          color = _this$props.color,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"]);\n\n      var checkedColor = color || theme.colors.accent;\n      var onTintColor = Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? setColor(white).alpha(0.1).rgb().string() : setColor(black).alpha(0.12).rgb().string() : setColor(checkedColor).alpha(0.5).rgb().string();\n      var thumbTintColor = Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? grey800 : grey400 : value ? checkedColor : theme.dark ? grey400 : grey50;\n      var props = version && version.major === 0 && version.minor <= 56 ? {\n        onTintColor: onTintColor,\n        thumbTintColor: thumbTintColor\n      } : {\n        thumbColor: thumbTintColor,\n        trackColor: {\n          true: onTintColor,\n          false: ''\n        }\n      };\n      return React.createElement(NativeSwitch, _extends({\n        value: value,\n        disabled: disabled,\n        onValueChange: disabled ? undefined : onValueChange\n      }, props, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        }\n      }));\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nexport default withTheme(Switch);","map":{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","Switch","React","Component","value","disabled","onValueChange","color","theme","rest","checkedColor","onTintColor","Platform","setColor","thumbTintColor","props","thumbColor","trackColor","true","false","withTheme"],"mappings":";;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA;;;;AAQA,OAAA,QAAA,MAAA,OAAA;AACA,SAAA,SAAA;AAGA,IAAMA,OAAO,GAAGC,aAAa,CAAbA,iBAAAA,GACZA,aAAa,CAAbA,iBAAAA,CADYA,kBAAAA,GAAhB,SAAA;;AA0EMC,IAAAA,M;;;;;;;;;;;6BACK;AAAA,UAAA,WAAA,GAQH,KARG,KAAA;AAAA,UAELG,KAFK,GAAA,WAAA,CAAA,KAAA;AAAA,UAGLC,QAHK,GAAA,WAAA,CAAA,QAAA;AAAA,UAILC,aAJK,GAAA,WAAA,CAAA,aAAA;AAAA,UAKLC,KALK,GAAA,WAAA,CAAA,KAAA;AAAA,UAMLC,KANK,GAAA,WAAA,CAAA,KAAA;AAAA,UAOFC,IAPE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,eAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAUP,UAAMC,YAAY,GAAGH,KAAK,IAAIC,KAAK,CAALA,MAAAA,CAA9B,MAAA;AAEA,UAAMG,WAAW,GACfC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,YAAAA,GAEIP,QAAQ,GACRG,KAAK,CAALA,IAAAA,GACEK,QAAQ,CAARA,KAAQ,CAARA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GADFL,MACEK,EADFL,GAKEK,QAAQ,CAARA,KAAQ,CAARA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GANM,MAMNA,EANM,GAURA,QAAQ,CAARA,YAAQ,CAARA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GAbN,MAaMA,EAbN;AAkBA,UAAMC,cAAc,GAClBF,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,SAAAA,GAEIP,QAAQ,GACRG,KAAK,CAALA,IAAAA,GAAAA,OAAAA,GADQ,OAAA,GAIRJ,KAAK,GAAA,YAAA,GAELI,KAAK,CAALA,IAAAA,GAAAA,OAAAA,GATN,MAAA;AAaA,UAAMO,KAAK,GACThB,OAAO,IAAIA,OAAO,CAAPA,KAAAA,KAAXA,CAAAA,IAAkCA,OAAO,CAAPA,KAAAA,IAAlCA,EAAAA,GACI;AACEY,QAAAA,WAAW,EADb,WAAA;AAEEG,QAAAA,cAAc,EAHpBf;AACI,OADJA,GAKI;AACEiB,QAAAA,UAAU,EADZ,cAAA;AAEEC,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EADM,WAAA;AAEVC,UAAAA,KAAK,EAVf;AAQoB;AAFd,OANN;AAcA,aACE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AACE,QAAA,KAAK,EADP,KAAA;AAEE,QAAA,QAAQ,EAFV,QAAA;AAGE,QAAA,aAAa,EAAEd,QAAQ,GAAA,SAAA,GAHzB;AAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;;EA1DiBH,KAAK,CAACC,S,CAArBF;;AAsEN,eAAemB,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentProps<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={() =>\n *           { this.setState({ isSwitchOn: !isSwitchOn }); }\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n        ? theme.dark\n          ? setColor(white)\n              .alpha(0.1)\n              .rgb()\n              .string()\n          : setColor(black)\n              .alpha(0.12)\n              .rgb()\n              .string()\n        : setColor(checkedColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n        ? theme.dark\n          ? grey800\n          : grey400\n        : value\n        ? checkedColor\n        : theme.dark\n        ? grey400\n        : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? {\n            onTintColor,\n            thumbTintColor,\n          }\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n              false: '',\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"module"}