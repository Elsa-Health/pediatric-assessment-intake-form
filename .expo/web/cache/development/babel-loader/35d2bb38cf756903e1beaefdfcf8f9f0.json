{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Badge.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar defaultSize = 20;\n\nvar Badge = function (_React$Component) {\n  _inherits(Badge, _React$Component);\n\n  function Badge() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Badge);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Badge)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      opacity: new Animated.Value(_this.props.visible ? 1 : 0)\n    };\n    return _this;\n  }\n\n  _createClass(Badge, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var visible = this.props.visible;\n\n      if (visible !== prevProps.visible) {\n        Animated.timing(this.state.opacity, {\n          toValue: visible ? 1 : 0,\n          duration: 150,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          _this$props$size = _this$props.size,\n          size = _this$props$size === void 0 ? defaultSize : _this$props$size,\n          style = _this$props.style,\n          theme = _this$props.theme;\n      var opacity = this.state.opacity;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.notification : _ref$backgroundColor,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n      var textColor = color(backgroundColor).isLight() ? black : white;\n      var borderRadius = size / 2;\n      return React.createElement(Animated.Text, {\n        numberOfLines: 1,\n        style: [_objectSpread({\n          opacity: opacity,\n          backgroundColor: backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5\n        }, theme.fonts.regular, {\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius: borderRadius\n        }), styles.container, restStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }\n      }, children);\n    }\n  }]);\n\n  return Badge;\n}(React.Component);\n\nBadge.defaultProps = {\n  visible: true,\n  size: defaultSize\n};\nexport default withTheme(Badge);\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","React","Component","defaultProps","visible","size","state","opacity","Animated","prevProps","toValue","duration","useNativeDriver","children","style","theme","backgroundColor","restStyle","StyleSheet","textColor","color","borderRadius","fontSize","lineHeight","height","minWidth","styles","withTheme","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof TextInput> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: defaultSize,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const { children, size = defaultSize, style, theme } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).isLight() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            ...theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}