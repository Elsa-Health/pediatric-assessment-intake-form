{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/List/ListItem.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListItem = function (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListItem).apply(this, arguments));\n  }\n\n  _createClass(ListItem, [{\n    key: \"renderDescription\",\n    value: function renderDescription(descriptionColor, description) {\n      var _this$props = this.props,\n          descriptionEllipsizeMode = _this$props.descriptionEllipsizeMode,\n          descriptionStyle = _this$props.descriptionStyle,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines;\n      return typeof description === 'function' ? description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize\n      }) : React.createElement(Text, {\n        numberOfLines: descriptionNumberOfLines,\n        ellipsizeMode: descriptionEllipsizeMode,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      }, description);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          left = _this$props2.left,\n          right = _this$props2.right,\n          title = _this$props2.title,\n          description = _this$props2.description,\n          onPress = _this$props2.onPress,\n          theme = _this$props2.theme,\n          style = _this$props2.style,\n          titleStyle = _this$props2.titleStyle,\n          titleNumberOfLines = _this$props2.titleNumberOfLines,\n          titleEllipsizeMode = _this$props2.titleEllipsizeMode,\n          rest = _objectWithoutProperties(_this$props2, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"titleEllipsizeMode\"]);\n\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        style: [styles.container, style],\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        }\n      }), React.createElement(View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        }\n      }, left ? left({\n        color: descriptionColor,\n        style: description ? styles.iconMarginLeft : _objectSpread({}, styles.iconMarginLeft, styles.marginVerticalNone)\n      }) : null, React.createElement(View, {\n        style: [styles.item, styles.content],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, React.createElement(Text, {\n        ellipsizeMode: titleEllipsizeMode,\n        numberOfLines: titleNumberOfLines,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        }\n      }, title), description ? this.renderDescription(descriptionColor, description) : null), right ? right({\n        color: descriptionColor,\n        style: description ? styles.iconMarginRight : _objectSpread({}, styles.iconMarginRight, styles.marginVerticalNone)\n      }) : null));\n    }\n  }]);\n\n  return ListItem;\n}(React.Component);\n\nListItem.displayName = 'List.Item';\nListItem.defaultProps = {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","React","Component","displayName","defaultProps","titleNumberOfLines","descriptionNumberOfLines","descriptionColor","description","descriptionEllipsizeMode","descriptionStyle","ellipsizeMode","color","fontSize","styles","left","right","title","onPress","theme","style","titleStyle","titleEllipsizeMode","rest","titleColor","StyleSheet","container","padding","row","flexDirection","marginVerticalNone","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","item","paddingLeft","content","flex","justifyContent","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}