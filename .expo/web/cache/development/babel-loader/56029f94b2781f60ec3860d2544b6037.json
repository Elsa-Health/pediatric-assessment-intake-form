{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/CheckboxIOS.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\n\nvar CheckboxIOS = function (_React$Component) {\n  _inherits(CheckboxIOS, _React$Component);\n\n  function CheckboxIOS() {\n    _classCallCheck(this, CheckboxIOS);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CheckboxIOS).apply(this, arguments));\n  }\n\n  _createClass(CheckboxIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          status = _this$props.status,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n      var rippleColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      }\n\n      var icon = indeterminate ? 'minus' : 'check';\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        }\n      }), React.createElement(View, {\n        style: {\n          opacity: indeterminate || checked ? 1 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }\n      }, React.createElement(MaterialCommunityIcon, {\n        allowFontScaling: false,\n        name: icon,\n        size: 24,\n        color: checkedColor,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        }\n      })));\n    }\n  }]);\n\n  return CheckboxIOS;\n}(React.Component);\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS);\nexport { CheckboxIOS };","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","React","Component","displayName","status","disabled","onPress","theme","rest","checked","indeterminate","checkedColor","rippleColor","color","icon","styles","opacity","I18nManager","StyleSheet","container","borderRadius","padding","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, I18nManager } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkedColor}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}