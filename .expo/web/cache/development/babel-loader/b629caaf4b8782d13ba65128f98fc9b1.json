{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/TouchableRipple/index.tsx\";\nimport * as React from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { withTheme } from \"../../core/theming\";\n\nvar TouchableRipple = function (_React$Component) {\n  _inherits(TouchableRipple, _React$Component);\n\n  function TouchableRipple() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TouchableRipple);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TouchableRipple)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handlePressIn = function (e) {\n      var _this$props = _this.props,\n          centered = _this$props.centered,\n          rippleColor = _this$props.rippleColor,\n          onPressIn = _this$props.onPressIn,\n          theme = _this$props.theme;\n      onPressIn == null ? void 0 : onPressIn(e);\n      var dark = theme.dark,\n          colors = theme.colors;\n      var calculatedRippleColor = rippleColor || color(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();\n      var button = e.currentTarget;\n      var style = window.getComputedStyle(button);\n      var dimensions = button.getBoundingClientRect();\n      var touchX;\n      var touchY;\n\n      if (centered) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        var startX = e.nativeEvent.touches ? e.nativeEvent.touches[0].pageX : e.pageX;\n        var startY = e.nativeEvent.touches ? e.nativeEvent.touches[0].pageY : e.pageY;\n        touchX = startX - dimensions.left;\n        touchY = startY - dimensions.top;\n      }\n\n      var size = centered ? Math.min(dimensions.width, dimensions.height) * 1.25 : Math.max(dimensions.width, dimensions.height) * 2;\n      var container = document.createElement('span');\n      container.setAttribute('data-paper-ripple', '');\n\n      _extends(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: style.borderTopLeftRadius,\n        borderTopRightRadius: style.borderTopRightRadius,\n        borderBottomRightRadius: style.borderBottomRightRadius,\n        borderBottomLeftRadius: style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden'\n      });\n\n      var ripple = document.createElement('span');\n\n      _extends(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n        transitionProperty: 'transform opacity',\n        transitionDuration: Math.min(size * 1.5, 350) + \"ms\",\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n        left: touchX + \"px\",\n        top: touchY + \"px\",\n        width: size + \"px\",\n        height: size + \"px\"\n      });\n\n      container.appendChild(ripple);\n      button.appendChild(container);\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          _extends(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1'\n          });\n        });\n      });\n    };\n\n    _this.handlePressOut = function (e) {\n      _this.props.onPressOut && _this.props.onPressOut(e);\n      var containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          containers.forEach(function (container) {\n            var ripple = container.firstChild;\n\n            _extends(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0\n            });\n\n            setTimeout(function () {\n              var parentNode = container.parentNode;\n\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TouchableRipple, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          background = _this$props2.background,\n          borderless = _this$props2.borderless,\n          disabledProp = _this$props2.disabled,\n          rippleColor = _this$props2.rippleColor,\n          underlayColor = _this$props2.underlayColor,\n          children = _this$props2.children,\n          theme = _this$props2.theme,\n          rest = _objectWithoutProperties(_this$props2, [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"]);\n\n      var disabled = disabledProp || !this.props.onPress;\n      return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        }\n      }), React.createElement(View, {\n        style: [styles.touchable, borderless && styles.borderless, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        }\n      }, React.Children.only(children)));\n    }\n  }]);\n\n  return TouchableRipple;\n}(React.Component);\n\nTouchableRipple.defaultProps = {\n  borderless: false\n};\nTouchableRipple.supported = true;\nvar styles = StyleSheet.create({\n  touchable: {\n    position: 'relative'\n  },\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nexport default withTheme(TouchableRipple);","map":{"version":3,"sources":["index.tsx"],"names":["TouchableRipple","React","Component","defaultProps","borderless","supported","handlePressIn","centered","rippleColor","onPressIn","theme","dark","colors","calculatedRippleColor","color","button","e","style","window","dimensions","touchX","touchY","startX","startY","size","Math","container","document","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","width","height","requestAnimationFrame","handlePressOut","containers","setTimeout","parentNode","background","disabledProp","underlayColor","children","rest","disabled","styles","StyleSheet","touchable","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://facebook.github.io/react-native/docs/touchablenativefeedback.html#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: () => void | null;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press me</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass TouchableRipple extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  /**\n   * Whether ripple effect is supported.\n   */\n  static supported = true;\n\n  private handlePressIn = (e: any) => {\n    const { centered, rippleColor, onPressIn, theme } = this.props;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    if (centered) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      const startX = e.nativeEvent.touches\n        ? e.nativeEvent.touches[0].pageX\n        : e.pageX;\n      const startY = e.nativeEvent.touches\n        ? e.nativeEvent.touches[0].pageY\n        : e.pageY;\n\n      touchX = startX - dimensions.left;\n      touchY = startY - dimensions.top;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  private handlePressOut = (e: any) => {\n    this.props.onPressOut && this.props.onPressOut(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach(container => {\n          // @ts-ignore\n          const ripple = container.firstChild;\n\n          // @ts-ignore\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            // @ts-ignore\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const disabled = disabledProp || !this.props.onPress;\n\n    return (\n      <TouchableWithoutFeedback\n        {...rest}\n        onPressIn={this.handlePressIn}\n        onPressOut={this.handlePressOut}\n        disabled={disabled}\n      >\n        <View\n          style={[styles.touchable, borderless && styles.borderless, style]}\n        >\n          {React.Children.only(children)}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]},"metadata":{},"sourceType":"module"}