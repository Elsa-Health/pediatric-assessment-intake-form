{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ProgressBar.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nvar INDETERMINATE_DURATION = 2000;\nvar INDETERMINATE_MAX_WIDTH = 0.6;\nvar isRTL = I18nManager.isRTL;\n\nvar ProgressBar = function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  function ProgressBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProgressBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProgressBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      width: 0,\n      timer: new Animated.Value(0),\n      fade: new Animated.Value(0)\n    };\n    _this.indeterminateAnimation = null;\n\n    _this.onLayout = function (event) {\n      var visible = _this.props.visible;\n      var previousWidth = _this.state.width;\n\n      _this.setState({\n        width: event.nativeEvent.layout.width\n      }, function () {\n        if (visible && previousWidth === 0) {\n          _this.startAnimation();\n        }\n      });\n    };\n\n    _this.startAnimation = function () {\n      var _this$props = _this.props,\n          indeterminate = _this$props.indeterminate,\n          progress = _this$props.progress;\n      var _this$state = _this.state,\n          fade = _this$state.fade,\n          timer = _this$state.timer;\n      Animated.timing(fade, {\n        duration: 200,\n        toValue: 1,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n\n      if (indeterminate) {\n        if (!_this.indeterminateAnimation) {\n          _this.indeterminateAnimation = Animated.timing(timer, {\n            duration: INDETERMINATE_DURATION,\n            toValue: 1,\n            useNativeDriver: Platform.OS !== 'web',\n            isInteraction: false\n          });\n        }\n\n        timer.setValue(0);\n        Animated.loop(_this.indeterminateAnimation).start();\n      } else {\n        Animated.timing(timer, {\n          duration: 200,\n          toValue: progress ? progress : 0,\n          useNativeDriver: true,\n          isInteraction: false\n        }).start();\n      }\n    };\n\n    _this.stopAnimation = function () {\n      var fade = _this.state.fade;\n\n      if (_this.indeterminateAnimation) {\n        _this.indeterminateAnimation.stop();\n      }\n\n      Animated.timing(fade, {\n        duration: 200,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    };\n\n    return _this;\n  }\n\n  _createClass(ProgressBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          visible = _this$props2.visible,\n          progress = _this$props2.progress;\n\n      if (progress !== prevProps.progress || visible !== prevProps.visible) {\n        if (visible) {\n          this.startAnimation();\n        } else {\n          this.stopAnimation();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          color = _this$props3.color,\n          indeterminate = _this$props3.indeterminate,\n          style = _this$props3.style,\n          theme = _this$props3.theme;\n      var _this$state2 = this.state,\n          fade = _this$state2.fade,\n          timer = _this$state2.timer,\n          width = _this$state2.width;\n      var tintColor = color || theme.colors.primary;\n      var trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n      return React.createElement(View, {\n        onLayout: this.onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.container, {\n          backgroundColor: trackTintColor,\n          opacity: fade\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.progressBar, {\n          backgroundColor: tintColor,\n          width: width,\n          transform: [{\n            translateX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n            })\n          }, {\n            scaleX: timer.interpolate(indeterminate ? {\n              inputRange: [0, 0.5, 1],\n              outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n            } : {\n              inputRange: [0, 1],\n              outputRange: [0.0001, 1]\n            })\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      })));\n    }\n  }]);\n\n  return ProgressBar;\n}(React.Component);\n\nProgressBar.defaultProps = {\n  visible: true,\n  progress: 0\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","React","Component","defaultProps","visible","progress","state","width","timer","Animated","fade","indeterminateAnimation","prevProps","onLayout","previousWidth","event","startAnimation","indeterminate","duration","toValue","useNativeDriver","isInteraction","Platform","stopAnimation","color","style","theme","tintColor","trackTintColor","setColor","styles","backgroundColor","opacity","transform","translateX","inputRange","outputRange","scaleX","StyleSheet","container","height","overflow","progressBar","flex","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  width: number;\n  fade: Animated.Value;\n  timer: Animated.Value;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ProgressBar extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    progress: 0,\n  };\n\n  state = {\n    width: 0,\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(0),\n  };\n\n  indeterminateAnimation: Animated.CompositeAnimation | null = null;\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible, progress } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this.startAnimation();\n      } else {\n        this.stopAnimation();\n      }\n    }\n  }\n\n  private onLayout = (event: LayoutChangeEvent) => {\n    const { visible } = this.props;\n    const { width: previousWidth } = this.state;\n\n    this.setState({ width: event.nativeEvent.layout.width }, () => {\n      // Start animation the very first time when previously the width was unclear\n      if (visible && previousWidth === 0) {\n        this.startAnimation();\n      }\n    });\n  };\n\n  private startAnimation = () => {\n    const { indeterminate, progress } = this.props;\n    const { fade, timer } = this.state;\n\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!this.indeterminateAnimation) {\n        this.indeterminateAnimation = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(this.indeterminateAnimation).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  };\n\n  private stopAnimation = () => {\n    const { fade } = this.state;\n\n    // Stop indeterminate animation\n    if (this.indeterminateAnimation) {\n      this.indeterminateAnimation.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  };\n\n  render() {\n    const { color, indeterminate, style, theme } = this.props;\n    const { fade, timer, width } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor)\n      .alpha(0.38)\n      .rgb()\n      .string();\n\n    return (\n      <View onLayout={this.onLayout}>\n        <Animated.View\n          style={[\n            styles.container,\n            { backgroundColor: trackTintColor, opacity: fade },\n            style,\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                backgroundColor: tintColor,\n                width,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}