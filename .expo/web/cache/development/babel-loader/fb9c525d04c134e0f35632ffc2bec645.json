{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Avatar/AvatarText.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\nvar defaultSize = 64;\n\nvar AvatarText = function (_React$Component) {\n  _inherits(AvatarText, _React$Component);\n\n  function AvatarText() {\n    _classCallCheck(this, AvatarText);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AvatarText).apply(this, arguments));\n  }\n\n  _createClass(AvatarText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          label = _this$props.label,\n          _this$props$size = _this$props.size,\n          size = _this$props$size === void 0 ? defaultSize : _this$props$size,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          labelStyle = _this$props.labelStyle;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.primary : _ref$backgroundColor,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n      var textColor = this.props.color || (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n      return React.createElement(View, {\n        style: [{\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor: backgroundColor\n        }, styles.container, restStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, React.createElement(Text, {\n        style: [styles.text, {\n          color: textColor,\n          fontSize: size / 2,\n          lineHeight: size\n        }, labelStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }, label));\n    }\n  }]);\n\n  return AvatarText;\n}(React.Component);\n\nAvatarText.displayName = 'Avatar.Text';\nAvatarText.defaultProps = {\n  size: defaultSize\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default withTheme(AvatarText);","map":{"version":3,"sources":["AvatarText.tsx"],"names":["defaultSize","AvatarText","React","Component","displayName","defaultProps","size","label","style","theme","labelStyle","backgroundColor","restStyle","StyleSheet","textColor","color","width","height","borderRadius","styles","fontSize","lineHeight","container","justifyContent","alignItems","text","textAlign","textAlignVertical","withTheme"],"mappings":";;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAQA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA;AACA,SAAA,SAAA;AACA,SAAA,KAAA;AAGA,IAAMA,WAAW,GAAjB,EAAA;;AAgDMC,IAAAA,U;;;;;;;;;;;6BAOK;AAAA,UAAA,WAAA,GACyD,KADzD,KAAA;AAAA,UACCM,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UAAA,gBAAA,GAAA,WAAA,CAAA,IAAA;AAAA,UACQD,IADR,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,WAAA,GAAA,gBAAA;AAAA,UAC4BE,KAD5B,GAAA,WAAA,CAAA,KAAA;AAAA,UACmCC,KADnC,GAAA,WAAA,CAAA,KAAA;AAAA,UAC0CC,UAD1C,GAAA,WAAA,CAAA,UAAA;;AAAA,UAAA,IAAA,GAILG,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAJK,EAAA;AAAA,UAAA,oBAAA,GAAA,IAAA,CAAA,eAAA;AAAA,UAGCF,eAHD,GAAA,oBAAA,KAAA,KAAA,CAAA,GAGmBF,KAAK,CAALA,MAAAA,CAHnB,OAAA,GAAA,oBAAA;AAAA,UAG4CG,SAH5C,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,CAAA;;AAKP,UAAME,SAAS,GACb,KAAA,KAAA,CAAA,KAAA,KACCC,KAAK,CAALA,eAAK,CAALA,CAAAA,OAAAA,KAAAA,oBAAAA,GAFH,KACE,CADF;AAIA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,KAAK,EAAE,CACL;AACEC,UAAAA,KAAK,EADP,IAAA;AAEEC,UAAAA,MAAM,EAFR,IAAA;AAGEC,UAAAA,YAAY,EAAEZ,IAAI,GAHpB,CAAA;AAIEK,UAAAA,eAAe,EALZ;AACL,SADK,EAOLQ,MAAM,CAPD,SAAA,EADT,SACS,CADT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAYE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,QAAA,KAAK,EAAE,CACLA,MAAM,CADD,IAAA,EAEL;AACEJ,UAAAA,KAAK,EADP,SAAA;AAEEK,UAAAA,QAAQ,EAAEd,IAAI,GAFhB,CAAA;AAGEe,UAAAA,UAAU,EALP;AAEL,SAFK,EADT,UACS,CADT;AAUE,QAAA,aAAa,EAVf,CAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EAbJ,KAaI,CAZF,CADF;;;;;EAhBqBnB,KAAK,CAACC,S,CAAzBF;;AAAAA,U,CACGG,WADHH,GACiB,aADjBA;AAAAA,U,CAGGI,YAHHJ,GAGkB;AACpBK,EAAAA,IAAI,EADgB;AAAA,CAHlBL;AAgDN,IAAMkB,MAAM,GAAGN,UAAU,CAAVA,MAAAA,CAAkB;AAC/BS,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EADL,QAAA;AAETC,IAAAA,UAAU,EAHmB;AACpB,GADoB;AAK/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EADL,QAAA;AAEJC,IAAAA,iBAAiB,EAPrB;AAKQ;AALyB,CAAlBd,CAAf;AAWA,eAAee,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\nconst defaultSize = 64;\n\ntype Props = {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nclass AvatarText extends React.Component<Props> {\n  static displayName = 'Avatar.Text';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const { label, size = defaultSize, style, theme, labelStyle } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      this.props.color ||\n      (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        <Text\n          style={[\n            styles.text,\n            {\n              color: textColor,\n              fontSize: size / 2,\n              lineHeight: size,\n            },\n            labelStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"module"}