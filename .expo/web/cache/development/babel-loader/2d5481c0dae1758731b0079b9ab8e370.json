{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/FAB/FAB.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"../ActivityIndicator\";\nimport FABGroup from \"./FABGroup\";\nimport Surface from \"../Surface\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { black, white } from \"../../styles/colors\";\nimport { withTheme } from \"../../core/theming\";\n\nvar FAB = function (_React$Component) {\n  _inherits(FAB, _React$Component);\n\n  function FAB() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FAB);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FAB)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visibility: new Animated.Value(_this.props.visible ? 1 : 0)\n    };\n    return _this;\n  }\n\n  _createClass(FAB, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var scale = this.props.theme.animation.scale;\n\n      if (this.props.visible === prevProps.visible) {\n        return;\n      }\n\n      if (this.props.visible) {\n        Animated.timing(this.state.visibility, {\n          toValue: 1,\n          duration: 200 * scale,\n          useNativeDriver: true\n        }).start();\n      } else {\n        Animated.timing(this.state.visibility, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          small = _this$props.small,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          _this$props$accessibi = _this$props.accessibilityLabel,\n          accessibilityLabel = _this$props$accessibi === void 0 ? label : _this$props$accessibi,\n          customColor = _this$props.color,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          visible = _this$props.visible,\n          loading = _this$props.loading,\n          rest = _objectWithoutProperties(_this$props, [\"small\", \"icon\", \"label\", \"accessibilityLabel\", \"color\", \"disabled\", \"onPress\", \"theme\", \"style\", \"visible\", \"loading\"]);\n\n      var visibility = this.state.visibility;\n      var disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref$backgroundColor;\n\n      var foregroundColor;\n\n      if (typeof customColor !== 'undefined') {\n        foregroundColor = customColor;\n      } else if (disabled) {\n        foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      } else {\n        foregroundColor = !color(backgroundColor).isLight() ? white : 'rgba(0, 0, 0, .54)';\n      }\n\n      var rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n      return React.createElement(Surface, _extends({}, rest, {\n        style: [{\n          backgroundColor: backgroundColor,\n          opacity: visibility,\n          transform: [{\n            scale: visibility\n          }]\n        }, styles.container, disabled && styles.disabled, style],\n        pointerEvents: visible ? 'auto' : 'none',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        onPress: onPress,\n        rippleColor: rippleColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        style: styles.touchable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, React.createElement(View, {\n        style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        }\n      }, icon && loading !== true ? React.createElement(CrossFadeIcon, {\n        source: icon,\n        size: 24,\n        color: foregroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        }\n      }) : null, loading ? React.createElement(ActivityIndicator, {\n        size: 18,\n        color: foregroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        }\n      }) : null, label ? React.createElement(Text, {\n        style: [styles.label, _objectSpread({\n          color: foregroundColor\n        }, theme.fonts.medium)],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        }\n      }, label.toUpperCase()) : null)));\n    }\n  }]);\n\n  return FAB;\n}(React.Component);\n\nFAB.Group = FABGroup;\nFAB.defaultProps = {\n  visible: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  disabled: {\n    elevation: 0\n  }\n});\nexport default withTheme(FAB);","map":{"version":3,"sources":["FAB.tsx"],"names":["FAB","React","Component","Group","FABGroup","defaultProps","visible","state","visibility","Animated","prevProps","scale","toValue","duration","useNativeDriver","small","icon","label","accessibilityLabel","customColor","disabled","onPress","theme","style","loading","rest","disabledColor","color","backgroundColor","StyleSheet","foregroundColor","rippleColor","opacity","transform","styles","container","borderRadius","elevation","touchable","standard","height","width","extended","paddingHorizontal","content","flexDirection","alignItems","justifyContent","marginHorizontal","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { Animated, View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport FABGroup, { FABGroup as _FABGroup } from './FABGroup';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\nimport { IconSource } from './../Icon';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  visibility: Animated.Value;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nclass FAB extends React.Component<Props, State> {\n  // @component ./FABGroup.tsx\n  static Group = FABGroup;\n\n  static defaultProps = {\n    visible: true,\n  };\n\n  state = {\n    visibility: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { scale } = this.props.theme.animation;\n    if (this.props.visible === prevProps.visible) {\n      return;\n    }\n\n    if (this.props.visible) {\n      Animated.timing(this.state.visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(this.state.visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      small,\n      icon,\n      label,\n      accessibilityLabel = label,\n      color: customColor,\n      disabled,\n      onPress,\n      theme,\n      style,\n      visible,\n      loading,\n      ...rest\n    } = this.props;\n    const { visibility } = this.state;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n      StyleSheet.flatten(style) || {};\n\n    let foregroundColor;\n\n    if (typeof customColor !== 'undefined') {\n      foregroundColor = customColor;\n    } else if (disabled) {\n      foregroundColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else {\n      foregroundColor = !color(backgroundColor).isLight()\n        ? white\n        : 'rgba(0, 0, 0, .54)';\n    }\n\n    const rippleColor = color(foregroundColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        {...rest}\n        style={\n          [\n            {\n              backgroundColor,\n              opacity: visibility,\n              transform: [\n                {\n                  scale: visibility,\n                },\n              ],\n            },\n            styles.container,\n            disabled && styles.disabled,\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n      >\n        <TouchableRipple\n          borderless\n          onPress={onPress}\n          rippleColor={rippleColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : []}\n          style={styles.touchable}\n        >\n          <View\n            style={[\n              styles.content,\n              label ? styles.extended : small ? styles.small : styles.standard,\n            ]}\n            pointerEvents=\"none\"\n          >\n            {icon && loading !== true ? (\n              <CrossFadeIcon source={icon} size={24} color={foregroundColor} />\n            ) : null}\n            {loading ? (\n              <ActivityIndicator size={18} color={foregroundColor} />\n            ) : null}\n            {label ? (\n              <Text\n                style={[\n                  styles.label,\n                  { color: foregroundColor, ...theme.fonts.medium },\n                ]}\n              >\n                {label.toUpperCase()}\n              </Text>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n"]},"metadata":{},"sourceType":"module"}