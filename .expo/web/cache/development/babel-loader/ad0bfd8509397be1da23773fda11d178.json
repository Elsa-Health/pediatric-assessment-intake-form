{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/BottomNavigation.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from \"../styles/overlay\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar MIN_RIPPLE_SCALE = 0.001;\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar FAR_FAR_AWAY = 9999;\nvar Touchable = TouchableRipple.supported ? TouchableRipple : function (_ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      borderless = _ref.borderless,\n      centered = _ref.centered,\n      rippleColor = _ref.rippleColor,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"]);\n\n  return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    }\n  }), React.createElement(View, {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    }\n  }, children));\n};\n\nvar SceneComponent = function (_React$PureComponent) {\n  _inherits(SceneComponent, _React$PureComponent);\n\n  function SceneComponent() {\n    _classCallCheck(this, SceneComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SceneComponent).apply(this, arguments));\n  }\n\n  _createClass(SceneComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          component = _this$props.component,\n          rest = _objectWithoutProperties(_this$props, [\"component\"]);\n\n      return React.createElement(component, rest);\n    }\n  }]);\n\n  return SceneComponent;\n}(React.PureComponent);\n\nvar BottomNavigation = function (_React$Component) {\n  _inherits(BottomNavigation, _React$Component);\n\n  _createClass(BottomNavigation, null, [{\n    key: \"SceneMap\",\n    value: function SceneMap(scenes) {\n      return function (_ref2) {\n        var route = _ref2.route,\n            jumpTo = _ref2.jumpTo;\n        return React.createElement(SceneComponent, {\n          key: route.key,\n          component: scenes[route.key ? route.key : ''],\n          route: route,\n          jumpTo: jumpTo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356\n          }\n        });\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$navigation = nextProps.navigationState,\n          index = _nextProps$navigation.index,\n          routes = _nextProps$navigation.routes;\n      var tabs = routes.map(function (_, i) {\n        return prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0);\n      });\n      var offsets = routes.map(function (_, i) {\n        return prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1);\n      });\n      var nextState = {\n        tabs: tabs,\n        offsets: offsets\n      };\n\n      if (index !== prevState.current) {\n        _extends(nextState, {\n          current: index,\n          previous: prevState.current,\n          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n        });\n      }\n\n      return nextState;\n    }\n  }]);\n\n  function BottomNavigation(props) {\n    var _this;\n\n    _classCallCheck(this, BottomNavigation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BottomNavigation).call(this, props));\n\n    _this.handleKeyboardShow = function () {\n      return _this.setState({\n        keyboard: true\n      }, function () {\n        return Animated.timing(_this.state.visible, {\n          toValue: 0,\n          duration: 150,\n          useNativeDriver: true\n        }).start();\n      });\n    };\n\n    _this.handleKeyboardHide = function () {\n      return Animated.timing(_this.state.visible, {\n        toValue: 1,\n        duration: 100,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          keyboard: false\n        });\n      });\n    };\n\n    _this.animateToCurrentIndex = function () {\n      var shifting = _this.isShifting();\n\n      var navigationState = _this.props.navigationState;\n      var routes = navigationState.routes,\n          index = navigationState.index;\n\n      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([Animated.timing(_this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 : 0,\n        useNativeDriver: true\n      })].concat(_toConsumableArray(routes.map(function (_, i) {\n        return Animated.timing(_this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 : 0,\n          useNativeDriver: true\n        });\n      })))).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        _this.state.tabs.map(function (tab, i) {\n          return tab.setValue(i === index ? 1 : 0);\n        });\n\n        _this.state.index.setValue(index);\n\n        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          _this.state.offsets.forEach(function (offset, i) {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    };\n\n    _this.handleLayout = function (e) {\n      var layout = _this.state.layout;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width,\n          measured: true\n        }\n      });\n    };\n\n    _this.handleTabPress = function (index) {\n      var _this$props2 = _this.props,\n          navigationState = _this$props2.navigationState,\n          onTabPress = _this$props2.onTabPress,\n          onIndexChange = _this$props2.onIndexChange;\n      var event = {\n        route: navigationState.routes[index],\n        defaultPrevented: false,\n        preventDefault: function preventDefault() {\n          event.defaultPrevented = true;\n        }\n      };\n      onTabPress == null ? void 0 : onTabPress(event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (index !== navigationState.index) {\n        onIndexChange(index);\n      }\n    };\n\n    _this.jumpTo = function (key) {\n      var index = _this.props.navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      _this.props.onIndexChange(index);\n    };\n\n    _this.isShifting = function () {\n      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;\n    };\n\n    var _index = _this.props.navigationState.index;\n    _this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(_index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: {\n        height: 0,\n        width: 0,\n        measured: false\n      },\n      current: _index,\n      previous: 0,\n      loaded: [_index],\n      keyboard: false\n    };\n    return _this;\n  }\n\n  _createClass(BottomNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animateToCurrentIndex();\n\n      if (Platform.OS === 'ios') {\n        Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (prevProps.navigationState.index === this.props.navigationState.index) {\n        return;\n      }\n\n      this.state.offsets.forEach(function (offset, i) {\n        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {\n          offset.setValue(0);\n        }\n      });\n      this.animateToCurrentIndex();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          navigationState = _this$props3.navigationState,\n          renderScene = _this$props3.renderScene,\n          renderIcon = _this$props3.renderIcon,\n          renderLabel = _this$props3.renderLabel,\n          _this$props3$getLabel = _this$props3.getLabelText,\n          getLabelText = _this$props3$getLabel === void 0 ? function (_ref4) {\n        var route = _ref4.route;\n        return route.title;\n      } : _this$props3$getLabel,\n          _this$props3$getBadge = _this$props3.getBadge,\n          getBadge = _this$props3$getBadge === void 0 ? function (_ref5) {\n        var route = _ref5.route;\n        return route.badge;\n      } : _this$props3$getBadge,\n          _this$props3$getColor = _this$props3.getColor,\n          getColor = _this$props3$getColor === void 0 ? function (_ref6) {\n        var route = _ref6.route;\n        return route.color;\n      } : _this$props3$getColor,\n          _this$props3$getAcces = _this$props3.getAccessibilityLabel,\n          getAccessibilityLabel = _this$props3$getAcces === void 0 ? function (_ref7) {\n        var route = _ref7.route;\n        return route.accessibilityLabel;\n      } : _this$props3$getAcces,\n          _this$props3$getTestI = _this$props3.getTestID,\n          getTestID = _this$props3$getTestI === void 0 ? function (_ref8) {\n        var route = _ref8.route;\n        return route.testID;\n      } : _this$props3$getTestI,\n          activeColor = _this$props3.activeColor,\n          inactiveColor = _this$props3.inactiveColor,\n          keyboardHidesNavigationBar = _this$props3.keyboardHidesNavigationBar,\n          barStyle = _this$props3.barStyle,\n          labeled = _this$props3.labeled,\n          style = _this$props3.style,\n          theme = _this$props3.theme,\n          sceneAnimationEnabled = _this$props3.sceneAnimationEnabled;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          loaded = _this$state.loaded,\n          index = _this$state.index,\n          visible = _this$state.visible,\n          ripple = _this$state.ripple,\n          keyboard = _this$state.keyboard,\n          tabs = _this$state.tabs,\n          offsets = _this$state.offsets;\n      var routes = navigationState.routes;\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n      var shifting = this.isShifting();\n\n      var _ref9 = StyleSheet.flatten(barStyle) || {},\n          customBackground = _ref9.backgroundColor,\n          _ref9$elevation = _ref9.elevation,\n          elevation = _ref9$elevation === void 0 ? 4 : _ref9$elevation;\n\n      var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n      var backgroundColor = shifting ? index.interpolate({\n        inputRange: routes.map(function (_, i) {\n          return i;\n        }),\n        outputRange: routes.map(function (route) {\n          return getColor({\n            route: route\n          }) || approxBackgroundColor;\n        })\n      }) : approxBackgroundColor;\n      var isDark = !color(approxBackgroundColor).isLight();\n      var textColor = isDark ? white : black;\n      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n      var touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n      var maxTabBarWidth = maxTabWidth * routes.length;\n      var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n      var tabWidth = tabBarWidth / routes.length;\n      var rippleSize = layout.width / 4;\n      return React.createElement(View, {\n        style: [styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665\n        }\n      }, React.createElement(View, {\n        style: [styles.content, {\n          backgroundColor: colors.background\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666\n        }\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(index)) {\n          return null;\n        }\n\n        var focused = navigationState.index === index;\n        var opacity = sceneAnimationEnabled !== false ? tabs[index] : focused ? 1 : 0;\n        var top = offsets[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, FAR_FAR_AWAY]\n        });\n        return React.createElement(Animated.View, {\n          key: route.key,\n          pointerEvents: focused ? 'auto' : 'none',\n          accessibilityElementsHidden: !focused,\n          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n          style: [StyleSheet.absoluteFill, {\n            opacity: opacity\n          }],\n          collapsable: false,\n          removeClippedSubviews: Platform.OS === 'ios' ? navigationState.index !== index : true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 683\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.content, {\n            top: top\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 698\n          }\n        }, renderScene({\n          route: route,\n          jumpTo: _this3.jumpTo\n        })));\n      })), React.createElement(Surface, {\n        style: [styles.bar, keyboardHidesNavigationBar ? {\n          transform: [{\n            translateY: visible.interpolate({\n              inputRange: [0, 1],\n              outputRange: [layout.height, 0]\n            })\n          }],\n          position: keyboard ? 'absolute' : null\n        } : null, barStyle],\n        pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboard ? 'none' : 'auto' : 'none',\n        onLayout: this.handleLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.barContent, {\n          backgroundColor: backgroundColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740\n        }\n      }, React.createElement(SafeAreaView, {\n        forceInset: {\n          top: 'never',\n          bottom: 'always'\n        },\n        style: [styles.items, {\n          maxWidth: maxTabBarWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 741\n        }\n      }, shifting ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.ripple, {\n          top: (BAR_HEIGHT - rippleSize) / 2,\n          left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n          height: rippleSize,\n          width: rippleSize,\n          borderRadius: rippleSize / 2,\n          backgroundColor: getColor({\n            route: routes[navigationState.index]\n          }),\n          transform: [{\n            scale: ripple.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 8]\n            })\n          }],\n          opacity: ripple.interpolate({\n            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n            outputRange: [0, 0, 1, 1]\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        }\n      }) : null, routes.map(function (route, index) {\n        var focused = navigationState.index === index;\n        var active = tabs[index];\n        var scale = labeled && shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        }) : 1;\n        var translateY = labeled ? shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [7, 0]\n        }) : 0 : 7;\n        var activeOpacity = active;\n        var inactiveOpacity = active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        });\n        var badge = getBadge({\n          route: route\n        });\n        return React.createElement(Touchable, {\n          key: route.key,\n          borderless: true,\n          centered: true,\n          rippleColor: touchColor,\n          onPress: function onPress() {\n            return _this3.handleTabPress(index);\n          },\n          testID: getTestID({\n            route: route\n          }),\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          accessibilityStates: ['selected'],\n          style: styles.item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 815\n          }\n        }, React.createElement(View, {\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 831\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.iconContainer, {\n            transform: [{\n              translateY: translateY\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 832\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.iconWrapper, {\n            opacity: activeOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 838\n          }\n        }, renderIcon ? renderIcon({\n          route: route,\n          focused: true,\n          color: activeTintColor\n        }) : React.createElement(Icon, {\n          source: route.icon,\n          color: activeTintColor,\n          size: 24,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 851\n          }\n        })), React.createElement(Animated.View, {\n          style: [styles.iconWrapper, {\n            opacity: inactiveOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 858\n          }\n        }, renderIcon ? renderIcon({\n          route: route,\n          focused: false,\n          color: inactiveTintColor\n        }) : React.createElement(Icon, {\n          source: route.icon,\n          color: inactiveTintColor,\n          size: 24,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 871\n          }\n        })), React.createElement(View, {\n          style: [styles.badgeContainer, {\n            right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 878\n          }\n        }, typeof badge === 'boolean' ? React.createElement(Badge, {\n          visible: badge,\n          size: 8,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 890\n          }\n        }) : React.createElement(Badge, {\n          visible: badge != null,\n          size: 16,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 892\n          }\n        }, badge))), labeled ? React.createElement(Animated.View, {\n          style: [styles.labelContainer, {\n            transform: [{\n              scale: scale\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 899\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.labelWrapper, {\n            opacity: activeOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 905\n          }\n        }, renderLabel ? renderLabel({\n          route: route,\n          focused: true,\n          color: activeTintColor\n        }) : React.createElement(Text, {\n          style: [styles.label, {\n            color: activeTintColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 918\n          }\n        }, getLabelText({\n          route: route\n        }))), shifting ? null : React.createElement(Animated.View, {\n          style: [styles.labelWrapper, {\n            opacity: inactiveOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 929\n          }\n        }, renderLabel ? renderLabel({\n          route: route,\n          focused: false,\n          color: inactiveTintColor\n        }) : React.createElement(Text, {\n          style: [styles.label, {\n            color: inactiveTintColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 942\n          }\n        }, getLabelText({\n          route: route\n        })))) : React.createElement(View, {\n          style: styles.labelContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 955\n          }\n        })));\n      })))));\n    }\n  }]);\n\n  return BottomNavigation;\n}(React.Component);\n\nBottomNavigation.defaultProps = {\n  labeled: true,\n  keyboardHidesNavigationBar: true\n};\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%'\n  },\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","FAR_FAR_AWAY","Touchable","TouchableRipple","style","children","borderless","centered","rippleColor","rest","SceneComponent","React","PureComponent","component","BottomNavigation","Component","scenes","route","jumpTo","defaultProps","labeled","keyboardHidesNavigationBar","nextProps","prevState","index","routes","tabs","Animated","i","offsets","nextState","current","previous","loaded","visible","ripple","touch","layout","height","width","measured","keyboard","Platform","Keyboard","prevProps","offset","toValue","duration","useNativeDriver","shifting","navigationState","finished","tab","e","onTabPress","onIndexChange","event","defaultPrevented","preventDefault","renderScene","renderIcon","renderLabel","getLabelText","getBadge","getColor","getAccessibilityLabel","getTestID","activeColor","inactiveColor","barStyle","theme","sceneAnimationEnabled","colors","isDarkTheme","mode","customBackground","elevation","StyleSheet","approxBackgroundColor","overlay","backgroundColor","inputRange","outputRange","isDark","color","textColor","activeTintColor","inactiveTintColor","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","tabWidth","rippleSize","styles","focused","opacity","top","transform","translateY","position","bottom","maxWidth","left","borderRadius","scale","active","activeOpacity","inactiveOpacity","badge","right","String","withTheme","container","flex","overflow","content","bar","barContent","alignItems","items","flexDirection","item","paddingVertical","iconContainer","marginTop","marginHorizontal","alignSelf","iconWrapper","labelContainer","paddingBottom","labelWrapper","label","fontSize","textAlign","whiteSpace","badgeContainer"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-multi-comp */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label.\n   * By default, this is `true` when you have more than 3 tabs.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number reprsenting the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Style for the bottom navigation bar.\n   * You can set a bottom padding here if you have a translucent navigation bar on Android:\n   *\n   * ```js\n   * barStyle={{ paddingBottom: 48 }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  visible: Animated.Value;\n  /**\n   * Active state of individual tab items, active state is 1 and inactve state is 0.\n   */\n  tabs: Animated.Value[];\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecesary re-renders.\n   */\n  offsets: Animated.Value[];\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * Use don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  index: Animated.Value;\n  /**\n   * Animation for the touch, used to determine it's scale and opacity.\n   */\n  touch: Animated.Value;\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  ripple: Animated.Value;\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  layout: { height: number; width: number; measured: boolean };\n  /**\n   * Currently active index. Used only for getDerivedStateFromProps.\n   */\n  current: number;\n  /**\n   * Previously active index. Used to determine the position of the ripple.\n   */\n  previous: number;\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  loaded: number[];\n  /**\n   * Trak whether the keyboard is visible to show and hide the navigation bar.\n   */\n  keyboard: boolean;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst FAR_FAR_AWAY = 9999;\n\n// @ts-ignore\nconst Touchable = TouchableRipple.supported\n  ? TouchableRipple\n  : // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ style, children, borderless, centered, rippleColor, ...rest }: any) => (\n      <TouchableWithoutFeedback {...rest}>\n        <View style={style}>{children}</View>\n      </TouchableWithoutFeedback>\n    );\n\nclass SceneComponent extends React.PureComponent<any> {\n  render() {\n    const { component, ...rest } = this.props;\n    return React.createElement(component, rest);\n  }\n}\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     index: 0,\n *     routes: [\n *       { key: 'music', title: 'Music', icon: 'queue-music' },\n *       { key: 'albums', title: 'Albums', icon: 'album' },\n *       { key: 'recents', title: 'Recents', icon: 'history' },\n *     ],\n *   };\n *\n *   _handleIndexChange = index => this.setState({ index });\n *\n *   _renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   render() {\n *     return (\n *       <BottomNavigation\n *         navigationState={this.state}\n *         onIndexChange={this._handleIndexChange}\n *         renderScene={this._renderScene}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass BottomNavigation extends React.Component<Props, State> {\n  /**\n   * Function which takes a map of route keys to components.\n   * Pure components are used to minmize re-rendering of the pages.\n   * This drastically improves the animation performance.\n   */\n  static SceneMap(scenes: {\n    [key: string]: React.ComponentType<{\n      route: Route;\n      jumpTo: (key: string) => void;\n    }>;\n  }) {\n    return ({\n      route,\n      jumpTo,\n    }: {\n      route: Route;\n      jumpTo: (key: string) => void;\n    }) => (\n      <SceneComponent\n        key={route.key}\n        component={scenes[route.key ? route.key : '']}\n        route={route}\n        jumpTo={jumpTo}\n      />\n    );\n  }\n\n  static defaultProps = {\n    labeled: true,\n    keyboardHidesNavigationBar: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: any, prevState: State) {\n    const { index, routes } = nextProps.navigationState;\n\n    // Re-create animated values if routes have been added/removed\n    // Preserve previous animated values if they exist, so we don't break animations\n    const tabs = routes.map(\n      // focused === 1, unfocused === 0\n      (_: any, i: number) =>\n        prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0)\n    );\n    const offsets = routes.map(\n      // offscreen === 1, normal === 0\n      (_: any, i: number) =>\n        prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1)\n    );\n\n    const nextState = {\n      tabs,\n      offsets,\n    };\n\n    if (index !== prevState.current) {\n      /* $FlowFixMe */\n      Object.assign(nextState, {\n        // Store the current index in state so that we can later check if the index has changed\n        current: index,\n        previous: prevState.current,\n        // Set the current tab to be loaded if it was not loaded before\n        loaded: prevState.loaded.includes(index)\n          ? prevState.loaded\n          : [...prevState.loaded, index],\n      });\n    }\n\n    return nextState;\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { index } = this.props.navigationState;\n\n    this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: { height: 0, width: 0, measured: false },\n      current: index,\n      previous: 0,\n      loaded: [index],\n      keyboard: false,\n    };\n  }\n\n  componentDidMount() {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    this.animateToCurrentIndex();\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.navigationState.index === this.props.navigationState.index) {\n      return;\n    }\n\n    // Reset offsets of previous and current tabs before animation\n    this.state.offsets.forEach((offset, i) => {\n      if (\n        i === this.props.navigationState.index ||\n        i === prevProps.navigationState.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    this.animateToCurrentIndex();\n  }\n\n  componentWillUnmount() {\n    if (Platform.OS === 'ios') {\n      Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  private handleKeyboardShow = () =>\n    this.setState({ keyboard: true }, () =>\n      Animated.timing(this.state.visible, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start()\n    );\n\n  private handleKeyboardHide = () =>\n    Animated.timing(this.state.visible, {\n      toValue: 1,\n      duration: 100,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({ keyboard: false });\n    });\n\n  private animateToCurrentIndex = () => {\n    const shifting = this.isShifting();\n    const { navigationState } = this.props;\n    const { routes, index } = navigationState;\n\n    // Reset the ripple to avoid glitch if it's currently animating\n    this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n    Animated.parallel([\n      Animated.timing(this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 : 0,\n        useNativeDriver: true,\n      }),\n      ...routes.map((_, i) =>\n        Animated.timing(this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 : 0,\n          useNativeDriver: true,\n        })\n      ),\n    ]).start(({ finished }) => {\n      // Workaround a bug in native animations where this is reset after first animation\n      this.state.tabs.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n      // Update the index to change bar's bacground color and then hide the ripple\n      this.state.index.setValue(index);\n      this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        this.state.offsets.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { layout } = this.state;\n    const { height, width } = e.nativeEvent.layout;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n        measured: true,\n      },\n    });\n  };\n\n  private handleTabPress = (index: number) => {\n    const { navigationState, onTabPress, onIndexChange } = this.props;\n\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  private jumpTo = (key: string) => {\n    const index = this.props.navigationState.routes.findIndex(\n      route => route.key === key\n    );\n\n    this.props.onIndexChange(index);\n  };\n\n  private isShifting = () =>\n    typeof this.props.shifting === 'boolean'\n      ? this.props.shifting\n      : this.props.navigationState.routes.length > 3;\n\n  render() {\n    const {\n      navigationState,\n      renderScene,\n      renderIcon,\n      renderLabel,\n      getLabelText = ({ route }: { route: Route }) => route.title,\n      getBadge = ({ route }: { route: Route }) => route.badge,\n      getColor = ({ route }: { route: Route }) => route.color,\n      getAccessibilityLabel = ({ route }: { route: Route }) =>\n        route.accessibilityLabel,\n      getTestID = ({ route }: { route: Route }) => route.testID,\n      activeColor,\n      inactiveColor,\n      keyboardHidesNavigationBar,\n      barStyle,\n      labeled,\n      style,\n      theme,\n      sceneAnimationEnabled,\n    } = this.props;\n\n    const {\n      layout,\n      loaded,\n      index,\n      visible,\n      ripple,\n      keyboard,\n      tabs,\n      offsets,\n    } = this.state;\n    const { routes } = navigationState;\n    const { colors, dark: isDarkTheme, mode } = theme;\n\n    const shifting = this.isShifting();\n\n    const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n      StyleSheet.flatten(barStyle) || {};\n\n    const approxBackgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n\n    const backgroundColor = shifting\n      ? index.interpolate({\n          inputRange: routes.map((_, i) => i),\n          //@ts-ignore\n          outputRange: routes.map(\n            route => getColor({ route }) || approxBackgroundColor\n          ),\n        })\n      : approxBackgroundColor;\n\n    const isDark = !color(approxBackgroundColor).isLight();\n\n    const textColor = isDark ? white : black;\n    const activeTintColor =\n      typeof activeColor !== 'undefined' ? activeColor : textColor;\n    const inactiveTintColor =\n      typeof inactiveColor !== 'undefined'\n        ? inactiveColor\n        : color(textColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const touchColor = color(activeColor || activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n    const maxTabBarWidth = maxTabWidth * routes.length;\n\n    const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n    const tabWidth = tabBarWidth / routes.length;\n\n    const rippleSize = layout.width / 4;\n\n    return (\n      <View style={[styles.container, style]}>\n        <View style={[styles.content, { backgroundColor: colors.background }]}>\n          {routes.map((route, index) => {\n            if (!loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n            const focused = navigationState.index === index;\n\n            const opacity =\n              sceneAnimationEnabled !== false ? tabs[index] : focused ? 1 : 0;\n\n            const top = offsets[index].interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, FAR_FAR_AWAY],\n            });\n\n            return (\n              <Animated.View\n                key={route.key}\n                pointerEvents={focused ? 'auto' : 'none'}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n                style={[StyleSheet.absoluteFill, { opacity }]}\n                collapsable={false}\n                removeClippedSubviews={\n                  // On iOS, set removeClippedSubviews to true only when not focused\n                  // This is an workaround for a bug where the clipped view never re-appears\n                  Platform.OS === 'ios' ? navigationState.index !== index : true\n                }\n              >\n                <Animated.View style={[styles.content, { top }]}>\n                  {renderScene({\n                    route,\n                    jumpTo: this.jumpTo,\n                  })}\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </View>\n        <Surface\n          style={\n            [\n              styles.bar,\n              keyboardHidesNavigationBar\n                ? {\n                    // When the keyboard is shown, slide down the navigation bar\n                    transform: [\n                      {\n                        translateY: visible.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [layout.height, 0],\n                        }),\n                      },\n                    ],\n                    // Absolutely position the navigation bar so that the content is below it\n                    // This is needed to avoid gap at bottom when the navigation bar is hidden\n                    position: keyboard ? 'absolute' : null,\n                  }\n                : null,\n              barStyle,\n            ] as StyleProp<ViewStyle>\n          }\n          pointerEvents={\n            layout.measured\n              ? keyboardHidesNavigationBar && keyboard\n                ? 'none'\n                : 'auto'\n              : 'none'\n          }\n          onLayout={this.handleLayout}\n        >\n          <Animated.View style={[styles.barContent, { backgroundColor }]}>\n            <SafeAreaView\n              forceInset={{ top: 'never', bottom: 'always' }}\n              style={[styles.items, { maxWidth: maxTabBarWidth }]}\n            >\n              {shifting ? (\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    styles.ripple,\n                    {\n                      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                      top: (BAR_HEIGHT - rippleSize) / 2,\n                      left:\n                        tabWidth * (navigationState.index + 0.5) -\n                        rippleSize / 2,\n                      height: rippleSize,\n                      width: rippleSize,\n                      borderRadius: rippleSize / 2,\n                      backgroundColor: getColor({\n                        route: routes[navigationState.index],\n                      }),\n                      transform: [\n                        {\n                          // Scale to twice the size  to ensure it covers the whole navigation bar\n                          scale: ripple.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 8],\n                          }),\n                        },\n                      ],\n                      opacity: ripple.interpolate({\n                        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                        outputRange: [0, 0, 1, 1],\n                      }),\n                    },\n                  ]}\n                />\n              ) : null}\n              {routes.map((route, index) => {\n                const focused = navigationState.index === index;\n                const active = tabs[index];\n\n                // Scale the label up\n                const scale =\n                  labeled && shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.5, 1],\n                      })\n                    : 1;\n\n                // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n                const translateY = labeled\n                  ? shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [7, 0],\n                      })\n                    : 0\n                  : 7;\n\n                // We render the active icon and label on top of inactive ones and cross-fade them on change.\n                // This trick gives the illusion that we are animating between active and inactive colors.\n                // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n                const activeOpacity = active;\n                const inactiveOpacity = active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [1, 0],\n                });\n\n                const badge = getBadge({ route });\n\n                return (\n                  <Touchable\n                    key={route.key}\n                    borderless\n                    centered\n                    rippleColor={touchColor}\n                    onPress={() => this.handleTabPress(index)}\n                    testID={getTestID({ route })}\n                    accessibilityLabel={getAccessibilityLabel({ route })}\n                    accessibilityTraits={\n                      focused ? ['button', 'selected'] : 'button'\n                    }\n                    accessibilityComponentType=\"button\"\n                    accessibilityRole=\"button\"\n                    accessibilityStates={['selected']}\n                    style={styles.item}\n                  >\n                    <View pointerEvents=\"none\">\n                      <Animated.View\n                        style={[\n                          styles.iconContainer,\n                          { transform: [{ translateY }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={activeTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: false,\n                              color: inactiveTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={inactiveTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <View\n                          style={[\n                            styles.badgeContainer,\n                            {\n                              right:\n                                (badge != null && typeof badge !== 'boolean'\n                                  ? String(badge).length * -2\n                                  : 0) - 2,\n                            },\n                          ]}\n                        >\n                          {typeof badge === 'boolean' ? (\n                            <Badge visible={badge} size={8} />\n                          ) : (\n                            <Badge visible={badge != null} size={16}>\n                              {badge}\n                            </Badge>\n                          )}\n                        </View>\n                      </Animated.View>\n                      {labeled ? (\n                        <Animated.View\n                          style={[\n                            styles.labelContainer,\n                            { transform: [{ scale }] },\n                          ]}\n                        >\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: activeOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: true,\n                                color: activeTintColor,\n                              })\n                            ) : (\n                              <Text\n                                style={[\n                                  styles.label,\n                                  { color: activeTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                          {shifting ? null : (\n                            <Animated.View\n                              style={[\n                                styles.labelWrapper,\n                                { opacity: inactiveOpacity },\n                              ]}\n                            >\n                              {renderLabel ? (\n                                renderLabel({\n                                  route,\n                                  focused: false,\n                                  color: inactiveTintColor,\n                                })\n                              ) : (\n                                <Text\n                                  style={[\n                                    styles.label,\n                                    { color: inactiveTintColor },\n                                  ]}\n                                >\n                                  {getLabelText({ route })}\n                                </Text>\n                              )}\n                            </Animated.View>\n                          )}\n                        </Animated.View>\n                      ) : (\n                        <View style={styles.labelContainer} />\n                      )}\n                    </View>\n                  </Touchable>\n                );\n              })}\n            </SafeAreaView>\n          </Animated.View>\n        </Surface>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}