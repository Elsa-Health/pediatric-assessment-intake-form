{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Typography/Text.tsx\";\nimport * as React from 'react';\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Text = function (_React$Component) {\n  _inherits(Text, _React$Component);\n\n  function Text() {\n    _classCallCheck(this, Text);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Text).apply(this, arguments));\n  }\n\n  _createClass(Text, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"theme\"]);\n\n      return React.createElement(NativeText, _extends({}, rest, {\n        ref: function ref(c) {\n          _this.root = c;\n        },\n        style: [_objectSpread({}, theme.fonts.regular, {\n          color: theme.colors.text,\n          textAlign: 'left'\n        }), style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        }\n      }));\n    }\n  }]);\n\n  return Text;\n}(React.Component);\n\nexport default withTheme(Text);","map":{"version":3,"sources":["Text.tsx"],"names":["Text","React","Component","args","style","theme","rest","color","textAlign","withTheme"],"mappings":";;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,SAAA,SAAA;;AAkBMA,IAAAA,I;;;;;;;;;;;mCAMWG,I,EAAc;AAC3B,aAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAAA,cAAA,CAApB,IAAoB,CAApB;;;;6BAGO;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAAA,WAAA,GAC2B,KAD3B,KAAA;AAAA,UACCC,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,KADR,GAAA,WAAA,CAAA,KAAA;AAAA,UACkBC,IADlB,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,GAAG,EAAE,SAAA,GAAA,CAAA,CAAA,EAAK;AACR,UAAA,KAAI,CAAJ,IAAA,GAAA,CAAA;AAHJ,SAAA;AAKE,QAAA,KAAK,EAAE,CAAA,aAAA,CAAA,EAAA,EAEAD,KAAK,CAALA,KAAAA,CAFA,OAAA,EAAA;AAGHE,UAAAA,KAAK,EAAEF,KAAK,CAALA,MAAAA,CAHJ,IAAA;AAIHG,UAAAA,SAAS,EAJN;AAAA,SAAA,CAAA,EALT,KAKS,CALT;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EADF;AACE;AAAA,OAAA,CAAA,CADF;;;;;EAbeP,KAAK,CAACC,S,CAAnBF;;AAgCN,eAAeS,SAAS,CAAxB,IAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { Text as NativeText, TextStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n// @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://facebook.github.io/react-native/docs/text.html#props\n */\nclass Text extends React.Component<Props> {\n  private root: NativeText | undefined | null;\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  render() {\n    const { style, theme, ...rest } = this.props;\n\n    return (\n      <NativeText\n        {...rest}\n        ref={c => {\n          this.root = c;\n        }}\n        style={[\n          {\n            ...theme.fonts.regular,\n            color: theme.colors.text,\n            textAlign: 'left',\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nexport default withTheme(Text);\n"]},"metadata":{},"sourceType":"module"}