{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Portal/Portal.tsx\";\nimport * as React from 'react';\nimport PortalConsumer from \"./PortalConsumer\";\nimport PortalHost, { PortalContext } from \"./PortalHost\";\nimport { ThemeProvider, withTheme } from \"../../core/theming\";\n\nvar Portal = function (_React$Component) {\n  _inherits(Portal, _React$Component);\n\n  function Portal() {\n    _classCallCheck(this, Portal);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Portal).apply(this, arguments));\n  }\n\n  _createClass(Portal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          theme = _this$props.theme;\n      return React.createElement(PortalContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        }\n      }, function (manager) {\n        return React.createElement(PortalConsumer, {\n          manager: manager,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          }\n        }, React.createElement(ThemeProvider, {\n          theme: theme,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          }\n        }, children));\n      });\n    }\n  }]);\n\n  return Portal;\n}(React.Component);\n\nPortal.Host = PortalHost;\nexport default withTheme(Portal);","map":{"version":3,"sources":["Portal.tsx"],"names":["Portal","React","Component","Host","PortalHost","children","theme","withTheme"],"mappings":";;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,cAAA;AACA,OAAA,UAAA,IAAA,aAAA;AACA,SAAA,aAAA,EAAA,SAAA;;AAmCMA,IAAAA,M;;;;;;;;;;;6BAIK;AAAA,UAAA,WAAA,GACqB,KADrB,KAAA;AAAA,UACCK,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWC,KADX,GAAA,WAAA,CAAA,KAAA;AAGP,aACE,KAAA,CAAA,aAAA,CAAC,aAAD,CAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,UAAA,QAAA,EAAA,YAAA;AAAA,UAAA,UAAA,EAAA;AAAA;AAAA,OAAA,EACG,UAAA,OAAA,EAAO;AAAA,eACN,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AAAgB,UAAA,OAAO,EAAvB,OAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,UAAA,KAAK,EAApB,KAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,QAAA,EAAA,YAAA;AAAA,YAAA,UAAA,EAAA;AAAA;AAAA,SAAA,EAFI,QAEJ,CADF,CADM;AAFZ,OACE,CADF;;;;;EAPiBL,KAAK,CAACC,S,CAArBF;;AAAAA,M,CAEGG,IAFHH,GAEUI,UAFVJ;AAmBN,eAAeO,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport { ThemeProvider, withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Portal>\n *         <Text>This is rendered at a different place</Text>\n *       </Portal>\n *     );\n *   }\n * }\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <PortalContext.Consumer>\n        {manager => (\n          <PortalConsumer manager={manager as PortalMethods}>\n            <ThemeProvider theme={theme}>{children}</ThemeProvider>\n          </PortalConsumer>\n        )}\n      </PortalContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n"]},"metadata":{},"sourceType":"module"}