{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonIOS.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar RadioButtonIOS = function (_React$Component) {\n  _inherits(RadioButtonIOS, _React$Component);\n\n  function RadioButtonIOS() {\n    _classCallCheck(this, RadioButtonIOS);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RadioButtonIOS).apply(this, arguments));\n  }\n\n  _createClass(RadioButtonIOS, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          status = _this$props.status,\n          value = _this$props.value,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\"]);\n\n      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;\n      var rippleColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      }\n\n      return React.createElement(RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        }\n      }, function (context) {\n        var checked = isChecked({\n          contextValue: context == null ? void 0 : context.value,\n          status: status,\n          value: value\n        }) === 'checked';\n        return React.createElement(TouchableRipple, _extends({}, rest, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: disabled ? undefined : function () {\n            handlePress({\n              onPress: onPress,\n              value: value,\n              onValueChange: context == null ? void 0 : context.onValueChange\n            });\n          },\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : [],\n          accessibilityLiveRegion: \"polite\",\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          }\n        }), React.createElement(View, {\n          style: {\n            opacity: checked ? 1 : 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          }\n        }, React.createElement(MaterialCommunityIcon, {\n          allowFontScaling: false,\n          name: \"check\",\n          size: 24,\n          color: checkedColor,\n          direction: I18nManager.isRTL ? 'rtl' : 'ltr',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          }\n        })));\n      });\n    }\n  }]);\n\n  return RadioButtonIOS;\n}(React.Component);\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);\nexport { RadioButtonIOS };","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","React","Component","displayName","disabled","onPress","theme","status","value","rest","checkedColor","rippleColor","color","checked","isChecked","contextValue","context","handlePress","onValueChange","styles","opacity","I18nManager","StyleSheet","container","borderRadius","padding","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, I18nManager } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    const { disabled, onPress, theme, status, value, ...rest } = this.props;\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor: string;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    return (\n      <RadioButtonContext.Consumer>\n        {(context?: RadioButtonContextType) => {\n          const checked =\n            isChecked({\n              contextValue: context?.value,\n              status,\n              value,\n            }) === 'checked';\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      handlePress({\n                        onPress,\n                        value,\n                        onValueChange: context?.onValueChange,\n                      });\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : []}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <View style={{ opacity: checked ? 1 : 0 }}>\n                <MaterialCommunityIcon\n                  allowFontScaling={false}\n                  name=\"check\"\n                  size={24}\n                  color={checkedColor}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}